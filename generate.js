// generate.js
const fs = require('fs');
const path = require('path');

const ROOT = process.argv[2];
if (!ROOT) {
    console.error('❌ Укажи путь: node generate.js "C:/Project"');
    process.exit(1);
}

function mkdirp(dir) {
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function createFile(filePath, content) {
    fs.writeFileSync(filePath, content, 'utf8');
}

const files = [
    {
        "path": ".idea/.gitignore",
        "content": "# Default ignored files\r\n/shelf/\r\n/workspace.xml\r\n# Editor-based HTTP Client requests\r\n/httpRequests/\r\n# Datasource local storage ignored files\r\n/dataSources/\r\n/dataSources.local.xml\r\n"
    },
    {
        "path": ".idea/demo-shop.iml",
        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"WEB_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>"
    },
    {
        "path": ".idea/modules.xml",
        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/demo-shop.iml\" filepath=\"$PROJECT_DIR$/.idea/demo-shop.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>"
    },
    {
        "path": ".idea/php.xml",
        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"MessDetectorOptionsConfiguration\">\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PHPCSFixerOptionsConfiguration\">\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PHPCodeSnifferOptionsConfiguration\">\r\n    <option name=\"highlightLevel\" value=\"WARNING\" />\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PhpProjectSharedConfiguration\" php_language_level=\"7.0\">\r\n    <option name=\"suggestChangeDefaultLanguageLevel\" value=\"false\" />\r\n  </component>\r\n  <component name=\"PhpStanOptionsConfiguration\">\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PsalmOptionsConfiguration\">\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n</project>"
    },
    {
        "path": ".idea/workspace.xml",
        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/User/AppData/Local/Temp/scoped_dir8308_985778655/node.exe&quot;\n  }\n}</component>\n</project>"
    },
    {
        "path": "admin-panel.php",
        "content": "<!DOCTYPE html>\r\n<html lang=\"ru\">\r\n<head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"description\" content=\"Современный одностраничный интернет-магазин с блогом и личным кабинетом.\" />\r\n    <meta name=\"theme-color\" content=\"#A8DADC\" />\r\n\r\n    <title>Интернет-магазин</title>\r\n\r\n    <!-- Google Fonts -->\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\r\n\r\n    <!-- Подключение шрифта -->\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap\" rel=\"stylesheet\" />\r\n\r\n    <!-- Стили -->\r\n    <link rel=\"stylesheet\" href=\"styles/style.css\" />\r\n    <link rel=\"stylesheet\" href=\"styles/admin.css\" />\r\n\r\n    <!-- Logo -->\r\n    <link rel=\"icon\" href=\"img/logocompany.png\" type=\"image/png\" />\r\n</head>\r\n\r\n<body>\r\n<div id=\"app\">\r\n    <!-- Хедер -->\r\n    <?php include 'scripts/header.php'; ?>\r\n    <!-- Товары -->\r\n    <section id=\"admin-products\" class=\"admin-section page-section\">\r\n        <div class=\"admin-header\">\r\n            <h2>Товары</h2>\r\n            <button id=\"add-product-btn\" class=\"btn primary\">Добавить товар</button>\r\n        </div>\r\n\r\n        <div id=\"product-list\" class=\"product-list\">\r\n        </div>\r\n\r\n        <div id=\"product-form-wrapper\" class=\"modal hidden\">\r\n            <form id=\"product-form\">\r\n                <h3 id=\"form-title\">Добавить товар</h3>\r\n                <input type=\"text\" name=\"name\" placeholder=\"Название\" required>\r\n                <input type=\"number\" name=\"price\" placeholder=\"Цена\" required>\r\n                <input type=\"text\" name=\"category\" placeholder=\"Категория\" required>\r\n                <input type=\"file\" name=\"image\">\r\n                <textarea name=\"description\" placeholder=\"Описание товара\" rows=\"4\"></textarea>\r\n                <div class=\"form-actions\">\r\n                    <button type=\"submit\" class=\"btn primary\">Сохранить</button>\r\n                    <button type=\"button\" id=\"cancel-form\" class=\"btn\">Отмена</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </section>\r\n    <!-- Заказы -->\r\n    <section id=\"admin-orders\" class=\"admin-section page-section hidden\">\r\n        <div class=\"admin-header\">\r\n            <h2>Заказы</h2>\r\n        </div>\r\n\r\n        <div id=\"order-list\" class=\"order-list\">\r\n            <!-- Список заказов будет загружаться сюда -->\r\n        </div>\r\n\r\n        <template id=\"order-template\">\r\n            <div class=\"order\">\r\n                <div>Заказ № <span class=\"order-id-number\"></span></div>\r\n                <div>Пользователь: <span class=\"order-user-id\"></span></div>\r\n                <div>Дата: <span class=\"order-date\"></span></div>\r\n                <div>\r\n                    Статус:\r\n                    <select class=\"order-status-select\">\r\n                        <option value=\"поступил\">Поступил</option>\r\n                        <option value=\"в обработке\">В обработке</option>\r\n                        <option value=\"в сборке\">В сборке</option>\r\n                        <option value=\"отправлен\">Отправлен</option>\r\n                        <option value=\"выдан\">Выдан</option>\r\n                        <option value=\"отменён\">Отменён</option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"order-items\"></div>\r\n            </div>\r\n        </template>\r\n    </section>\r\n    <!-- Блог -->\r\n    <section id=\"blog-section\" class=\"admin-section page-section hidden\">\r\n        <h2>Блог</h2>\r\n        <button id=\"add-blog-btn\" class=\"btn\">Добавить пост</button>\r\n        <div id=\"blog-list\" class=\"admin-list\"></div>\r\n        <div id=\"blog-form-wrapper\" class=\"modal hidden\">\r\n            <form id=\"blog-form\" enctype=\"multipart/form-data\">\r\n                <h3 id=\"blog-form-title\">Добавить пост</h3>\r\n                <input type=\"text\" name=\"title\" placeholder=\"Заголовок\" required>\r\n                <textarea name=\"content\" placeholder=\"Содержание\" required></textarea>\r\n                <input type=\"file\" name=\"image\">\r\n                <input type=\"hidden\" name=\"id\">\r\n                <button type=\"submit\" class=\"btn\">Сохранить</button>\r\n                <button type=\"button\" id=\"cancel-blog-form\" class=\"btn danger\">Отмена</button>\r\n            </form>\r\n        </div>\r\n    </section>\r\n    <!-- Пользователи -->\r\n    <div id=\"users-section\" class=\"admin-section page-section hidden\">\r\n        <h2>Управление пользователями</h2>\r\n        <div id=\"user-list\"></div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Скрипты -->\r\n<script src=\"js/router.js\"></script>\r\n<script src=\"js/animations.js\"></script>\r\n<script src=\"js/admin.js\"></script>\r\n<script src=\"js/burger.js\"></script>\r\n</body>\r\n</html>\r\n"
    },
    {
        "path": "DemoShop.sql",
        "content": "-- phpMyAdmin SQL Dump\n-- version 5.2.0\n-- https://www.phpmyadmin.net/\n--\n-- Хост: 127.0.0.1:3306\n-- Время создания: Июн 05 2025 г., 02:01\n-- Версия сервера: 8.0.30\n-- Версия PHP: 8.1.9\n\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\nSTART TRANSACTION;\nSET time_zone = \"+00:00\";\n\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!40101 SET NAMES utf8mb4 */;\n\n--\n-- База данных: `yandovich-shopik`\n--\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `blog_posts`\n--\n\nCREATE TABLE `blog_posts` (\n  `id` int NOT NULL,\n  `title` varchar(255) COLLATE utf8mb4_general_ci NOT NULL,\n  `content` text COLLATE utf8mb4_general_ci NOT NULL,\n  `image` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL,\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n--\n-- Дамп данных таблицы `blog_posts`\n--\n\nINSERT INTO `blog_posts` (`id`, `title`, `content`, `image`, `created_at`) VALUES\n(1, 'Первый тестовый', 'gs st nln stkjn kjn s;jkn k;jnbrw ;jtngskjrnb; st;gjknersghjbk sljhbjhlbvrtjhb slhbvwjsnt', '1749075886_image_2023-10-31_11-06-42.png', '2025-06-04 22:24:46'),\n(2, 'Второй тестовый', 'ы олт жл оте отожтжоыит ожтыеиожт ыоеткеолт олтежыолктжлиот ежицлоткжол', '1749076965_DSC_0566.JPG', '2025-06-04 22:42:45'),\n(3, 'Третий тестовый', 'аыожт жот т олжктлжт локетц лжоткецл толотклж лот олтлцеоктлжо тлоткциложкцт ложктилоктеиложт клотило тлотит оллотелжт лотлоетцилот лот лотелот т ложцктпкйупт лотцпклот кйу лотколут лотуйлжоткол отлкй лотйклжуот лоткпло тлкоутйп лотлжойтукплот жолтолткуйлптл отлжотйкп лжот', '1749077969_Авторизация.png', '2025-06-04 22:59:29');\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `blog_slider`\n--\n\nCREATE TABLE `blog_slider` (\n  `id` int NOT NULL,\n  `blog_post_id` int DEFAULT NULL,\n  `sort_order` int DEFAULT '0'\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `cart`\n--\n\nCREATE TABLE `cart` (\n  `id` int NOT NULL,\n  `user_id` int DEFAULT NULL,\n  `product_id` int DEFAULT NULL,\n  `quantity` int DEFAULT '1',\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `favorites`\n--\n\nCREATE TABLE `favorites` (\n  `id` int NOT NULL,\n  `user_id` int DEFAULT NULL,\n  `product_id` int DEFAULT NULL,\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n--\n-- Дамп данных таблицы `favorites`\n--\n\nINSERT INTO `favorites` (`id`, `user_id`, `product_id`, `created_at`) VALUES\n(5, 3, 3, '2025-06-04 22:07:25'),\n(6, 1, 4, '2025-06-04 22:59:46'),\n(7, 1, 3, '2025-06-04 22:59:51');\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `feedback`\n--\n\nCREATE TABLE `feedback` (\n  `id` int NOT NULL,\n  `name` varchar(100) COLLATE utf8mb4_general_ci NOT NULL,\n  `email` varchar(100) COLLATE utf8mb4_general_ci NOT NULL,\n  `message` text COLLATE utf8mb4_general_ci NOT NULL,\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `orders`\n--\n\nCREATE TABLE `orders` (\n  `id` int NOT NULL,\n  `user_id` int DEFAULT NULL,\n  `status` enum('поступил','в обработке','в сборке','отправлен','выдан','отменён') COLLATE utf8mb4_general_ci DEFAULT 'поступил',\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n--\n-- Дамп данных таблицы `orders`\n--\n\nINSERT INTO `orders` (`id`, `user_id`, `status`, `created_at`) VALUES\n(4, 1, 'отменён', '2025-06-04 17:30:48'),\n(5, 3, 'в обработке', '2025-06-04 22:07:41'),\n(6, 1, 'поступил', '2025-06-04 23:00:08');\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `order_items`\n--\n\nCREATE TABLE `order_items` (\n  `id` int NOT NULL,\n  `order_id` int DEFAULT NULL,\n  `product_id` int DEFAULT NULL,\n  `quantity` int NOT NULL,\n  `price` decimal(10,2) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n--\n-- Дамп данных таблицы `order_items`\n--\n\nINSERT INTO `order_items` (`id`, `order_id`, `product_id`, `quantity`, `price`) VALUES\n(4, 4, 2, 3, '1999.00'),\n(5, 5, 2, 2, '1999.00'),\n(6, 6, 4, 1, '4690.00'),\n(7, 6, 2, 2, '1999.00');\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `products`\n--\n\nCREATE TABLE `products` (\n  `id` int NOT NULL,\n  `title` varchar(255) COLLATE utf8mb4_general_ci NOT NULL,\n  `description` text COLLATE utf8mb4_general_ci,\n  `price` decimal(10,2) NOT NULL,\n  `image` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL,\n  `category` text COLLATE utf8mb4_general_ci NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n--\n-- Дамп данных таблицы `products`\n--\n\nINSERT INTO `products` (`id`, `title`, `description`, `price`, `image`, `category`) VALUES\n(2, 'авыорпдып', 'фкра иы удри пду', '1999.00', '1749057912_image_2023-10-31_11-06-42.png', 'мывмеи'),\n(3, 'еыкр ол енонц', 'ыеикеикипиа', '3333.00', '1749058121_DSC_0566.JPG', 'акфпеп'),\n(4, 'egrtrhvbjty', 'sdtgrslhbgr skjb kstjrb nnkjnbt grjknkj njnb jn jstn ;n ;jkrnbk;jn', '4690.00', '1749077918_Снимок экрана 2024-12-05 230303.png', 'Тестовая');\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `product_comments`\n--\n\nCREATE TABLE `product_comments` (\n  `id` int NOT NULL,\n  `product_id` int DEFAULT NULL,\n  `user_id` int DEFAULT NULL,\n  `comment` text COLLATE utf8mb4_general_ci NOT NULL,\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n-- --------------------------------------------------------\n\n--\n-- Структура таблицы `users`\n--\n\nCREATE TABLE `users` (\n  `id` int NOT NULL,\n  `name` varchar(100) COLLATE utf8mb4_general_ci NOT NULL,\n  `email` varchar(100) COLLATE utf8mb4_general_ci NOT NULL,\n  `password` varchar(255) COLLATE utf8mb4_general_ci NOT NULL,\n  `role` enum('user','admin') COLLATE utf8mb4_general_ci DEFAULT 'user',\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n--\n-- Дамп данных таблицы `users`\n--\n\nINSERT INTO `users` (`id`, `name`, `email`, `password`, `role`, `created_at`) VALUES\n(1, 'suomi', 'suomi@suomi.com', '$2y$10$9ZDoZvolHZNM2RFsVmSutOBkbjBLIBHYzXeqnyY4gtE/xr4S4bUuW', 'admin', '2025-06-04 10:42:54'),\n(3, 'lolkek', '1234@qwerty.qw', '$2y$10$SGdA6ieGqWIf8e9sLx29bOENH.adnCqmYwiq8CJQvf7UF/sD3szPe', 'user', '2025-06-04 22:05:53');\n\n--\n-- Индексы сохранённых таблиц\n--\n\n--\n-- Индексы таблицы `blog_posts`\n--\nALTER TABLE `blog_posts`\n  ADD PRIMARY KEY (`id`);\n\n--\n-- Индексы таблицы `blog_slider`\n--\nALTER TABLE `blog_slider`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `blog_post_id` (`blog_post_id`);\n\n--\n-- Индексы таблицы `cart`\n--\nALTER TABLE `cart`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `user_id` (`user_id`),\n  ADD KEY `product_id` (`product_id`);\n\n--\n-- Индексы таблицы `favorites`\n--\nALTER TABLE `favorites`\n  ADD PRIMARY KEY (`id`),\n  ADD UNIQUE KEY `user_id` (`user_id`,`product_id`),\n  ADD KEY `product_id` (`product_id`);\n\n--\n-- Индексы таблицы `feedback`\n--\nALTER TABLE `feedback`\n  ADD PRIMARY KEY (`id`);\n\n--\n-- Индексы таблицы `orders`\n--\nALTER TABLE `orders`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `user_id` (`user_id`);\n\n--\n-- Индексы таблицы `order_items`\n--\nALTER TABLE `order_items`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `order_id` (`order_id`),\n  ADD KEY `product_id` (`product_id`);\n\n--\n-- Индексы таблицы `products`\n--\nALTER TABLE `products`\n  ADD PRIMARY KEY (`id`);\n\n--\n-- Индексы таблицы `product_comments`\n--\nALTER TABLE `product_comments`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `product_id` (`product_id`),\n  ADD KEY `user_id` (`user_id`);\n\n--\n-- Индексы таблицы `users`\n--\nALTER TABLE `users`\n  ADD PRIMARY KEY (`id`),\n  ADD UNIQUE KEY `email` (`email`);\n\n--\n-- AUTO_INCREMENT для сохранённых таблиц\n--\n\n--\n-- AUTO_INCREMENT для таблицы `blog_posts`\n--\nALTER TABLE `blog_posts`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;\n\n--\n-- AUTO_INCREMENT для таблицы `blog_slider`\n--\nALTER TABLE `blog_slider`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT;\n\n--\n-- AUTO_INCREMENT для таблицы `cart`\n--\nALTER TABLE `cart`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;\n\n--\n-- AUTO_INCREMENT для таблицы `favorites`\n--\nALTER TABLE `favorites`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;\n\n--\n-- AUTO_INCREMENT для таблицы `feedback`\n--\nALTER TABLE `feedback`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT;\n\n--\n-- AUTO_INCREMENT для таблицы `orders`\n--\nALTER TABLE `orders`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;\n\n--\n-- AUTO_INCREMENT для таблицы `order_items`\n--\nALTER TABLE `order_items`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;\n\n--\n-- AUTO_INCREMENT для таблицы `products`\n--\nALTER TABLE `products`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;\n\n--\n-- AUTO_INCREMENT для таблицы `product_comments`\n--\nALTER TABLE `product_comments`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;\n\n--\n-- AUTO_INCREMENT для таблицы `users`\n--\nALTER TABLE `users`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;\n\n--\n-- Ограничения внешнего ключа сохраненных таблиц\n--\n\n--\n-- Ограничения внешнего ключа таблицы `blog_slider`\n--\nALTER TABLE `blog_slider`\n  ADD CONSTRAINT `blog_slider_ibfk_1` FOREIGN KEY (`blog_post_id`) REFERENCES `blog_posts` (`id`) ON DELETE CASCADE;\n\n--\n-- Ограничения внешнего ключа таблицы `cart`\n--\nALTER TABLE `cart`\n  ADD CONSTRAINT `cart_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,\n  ADD CONSTRAINT `cart_ibfk_2` FOREIGN KEY (`product_id`) REFERENCES `products` (`id`) ON DELETE CASCADE;\n\n--\n-- Ограничения внешнего ключа таблицы `favorites`\n--\nALTER TABLE `favorites`\n  ADD CONSTRAINT `favorites_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,\n  ADD CONSTRAINT `favorites_ibfk_2` FOREIGN KEY (`product_id`) REFERENCES `products` (`id`) ON DELETE CASCADE;\n\n--\n-- Ограничения внешнего ключа таблицы `orders`\n--\nALTER TABLE `orders`\n  ADD CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;\n\n--\n-- Ограничения внешнего ключа таблицы `order_items`\n--\nALTER TABLE `order_items`\n  ADD CONSTRAINT `order_items_ibfk_1` FOREIGN KEY (`order_id`) REFERENCES `orders` (`id`) ON DELETE CASCADE,\n  ADD CONSTRAINT `order_items_ibfk_2` FOREIGN KEY (`product_id`) REFERENCES `products` (`id`) ON DELETE SET NULL;\n\n--\n-- Ограничения внешнего ключа таблицы `product_comments`\n--\nALTER TABLE `product_comments`\n  ADD CONSTRAINT `product_comments_ibfk_1` FOREIGN KEY (`product_id`) REFERENCES `products` (`id`) ON DELETE CASCADE,\n  ADD CONSTRAINT `product_comments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;\nCOMMIT;\n\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n"
    },
    {
        "path": "img/blog/1749120552_i.webp",
        "content": "RIFF�\u0006\u0000\u0000WEBPVP8 �\u0006\u0000\u0000PH\u0000�\u0001*�\u0001\u0013\u0001>a0�G�#\"!&\u0014� �\f\tin�uQ\u001b�c����R��O�g���V�Ư\u000e,w8�q���s��\u001d�;�w8�q���s��\u001d�;�w8�q���s��\u001d�;�w8�q���s��\u001d�;�w8�q���s��\u001d~\u0002Jy��\u0005h\u0018I����Q0z\u0003<\u0012LO�lM��{L�u�v�,lO��,��`V�&\u0002��P���}]��\n���]��<�T\f�>\u0010�h�@ʈ�\t�u/�����3����������2���jA�R���!�����\b��r\\\u000f\u0000]�&\u0006\f�Ɂ��ji�Gu�\u0015�9\u0004��{L�BL\\\u0016\t�\n�@�rN\t+.��o�P��\nk�\\A�61���.�+>�.S�*�\u0000�e����֞�&q\t��J8af2�+ϓ��5\u0002\u000e�\u000b��L�s'���&�\u001e��oqB�\u0003�Gd�r;9G���c\u0014\u0012�\u001aK�\t���v;->H�Mn\u0006X��\u001ec\u0014��\u001bF�R��)}�FF��۵XU��\u001eH��D�߅S7a\u0018��\u0001��\u0013� �Z>\u001e�\u0000�Z\u000f0�:�:�F�;� ��I �f�Q��i\u0014�)蔽�x���?�7a\u0018��&6��h\u0017냇��i��=�{L���3�g��i��=�{L���3�g��i��=�{L���3�g��i��=�{L���3�g��i��=�{L���,�\u0000���\b\u0000\u0000\u0000\u0000�B��\\�\\E��~�S� ��?}y��B���y�b�\u001e\f��c\u0007�|�r6TE�n\u001eP]B�f��$ �u\f��PFf�1�`�e�mY�����\u0002.·�2\t�y��-�\u0006T4S�\u001f�+%�4�ו\u000b�E\u000e��}ͱ����f\u0001����#�\u001d�\u0019*�$�\u001e�5y2\u0006ݮ�37��f��~�\u001a�k{��J\f��f���\u0003�/]�b\u0000�&F`�\u000f\\��]ԛ�\u0001�\u0007a���<���4J\u0003&]��\u001c~�;\"\u001e�{9��q�:6�W\t�\u001a�ϲ>*1ۚXI�&^Z\u0019t\u0016\u000b�:\u0012��dƾSI[�-�sɆ���\u001e�\u0012\u0018\u001a�F z�~��ɮ-�9ĭ��BH*>�h\u0002\u0001f��<>Dd錉㾠�%q\u0002VBL��\u001f�\u0007�r�d*ߥ\f�����a����L��ֱ�3�S\f�K戊if�\n�%\u0007�[�t\b�|u�\b�Ğ����)Ke{擥��t����\u0017� ��!\u000eK��/dv�5��8��GS�\u001bƤg��\u0014�\u0015\u0019B:\u0001��e+E\u0003U\n�Ho��I��\u0010{�,0�]���ry�\u0007�L�\u0003F�G//�z'<��e\f��=νM���f�ҳ\u0005�%��߿�O�c*�{Q&\u0010|\f��F)P\u0003{���Kq��Z��M��*�P��n\ni⺄���\u0007t\u0014����M�-\u0019�7�Ϙyt<\u0006�m*�Cp1�\u0006\u0001�\u0013S���6\u001f#��SO��h,�\f��K��0\u0010��b�tʂH߮���\u001b����ّ�s���Vs\u000b�lt^��0^(��ō�/\u001e�\u0014R�� �B���4����G���v�If�#�\u0011�+g\u001c5� ���e�,�Pر����\u0006\fB9�$��cf���%\u00053Zԏ��0�]��\u0001ri\u0002m�\u0001�F�e\bWxj�p�\u0017�s%�]QL+_�\\��&2�d�ꡅ�\"��x[[v->�ੵ\u000b+=z-���z�Q�}\u0011��;\u0003��&X]\u0006'���\u0010`���\fuX��\u0006!��}�F��/Uj\u000ei�F��\u0005���7\u000f\u001d�����H뫄\f\\\u0019�Emf�(���V=t$`�3P�FCG=�Uӌ\u001fv.k���fi��N+��<��w����<�\u0013��w�5�x�0�ysv\u000fD�'\u0004(\b}�eܺ6Nɀ$ʱ�Gx�\u0006q����%��\\w\u001cLh���}���W\u0000���ή��\u0005�\u0011zT*ޚ��*\u0012sN�\u0004���$���!Ǒbxlgλ�I-d���!\u0013j#���\u0005\u0013��X�ܓ<\u0019�L@���el\u0007e�; 6\u001a\u0013���X��N��\u001d\u001b\u0007�����If\u0017�#F�!\u001b\u000f��\u001cmA<1M�W%�\u001f�P��V�|v<�D�*;�\u001e%\u001bCK��\u0000��p��\u001a�[\u001cE�@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
    },
    {
        "path": "img/logocompany.png",
        "content": ""
    },
    {
        "path": "img/products/1749120538_i.webp",
        "content": "RIFF�\u0006\u0000\u0000WEBPVP8 �\u0006\u0000\u0000PH\u0000�\u0001*�\u0001\u0013\u0001>a0�G�#\"!&\u0014� �\f\tin�uQ\u001b�c����R��O�g���V�Ư\u000e,w8�q���s��\u001d�;�w8�q���s��\u001d�;�w8�q���s��\u001d�;�w8�q���s��\u001d�;�w8�q���s��\u001d~\u0002Jy��\u0005h\u0018I����Q0z\u0003<\u0012LO�lM��{L�u�v�,lO��,��`V�&\u0002��P���}]��\n���]��<�T\f�>\u0010�h�@ʈ�\t�u/�����3����������2���jA�R���!�����\b��r\\\u000f\u0000]�&\u0006\f�Ɂ��ji�Gu�\u0015�9\u0004��{L�BL\\\u0016\t�\n�@�rN\t+.��o�P��\nk�\\A�61���.�+>�.S�*�\u0000�e����֞�&q\t��J8af2�+ϓ��5\u0002\u000e�\u000b��L�s'���&�\u001e��oqB�\u0003�Gd�r;9G���c\u0014\u0012�\u001aK�\t���v;->H�Mn\u0006X��\u001ec\u0014��\u001bF�R��)}�FF��۵XU��\u001eH��D�߅S7a\u0018��\u0001��\u0013� �Z>\u001e�\u0000�Z\u000f0�:�:�F�;� ��I �f�Q��i\u0014�)蔽�x���?�7a\u0018��&6��h\u0017냇��i��=�{L���3�g��i��=�{L���3�g��i��=�{L���3�g��i��=�{L���3�g��i��=�{L���,�\u0000���\b\u0000\u0000\u0000\u0000�B��\\�\\E��~�S� ��?}y��B���y�b�\u001e\f��c\u0007�|�r6TE�n\u001eP]B�f��$ �u\f��PFf�1�`�e�mY�����\u0002.·�2\t�y��-�\u0006T4S�\u001f�+%�4�ו\u000b�E\u000e��}ͱ����f\u0001����#�\u001d�\u0019*�$�\u001e�5y2\u0006ݮ�37��f��~�\u001a�k{��J\f��f���\u0003�/]�b\u0000�&F`�\u000f\\��]ԛ�\u0001�\u0007a���<���4J\u0003&]��\u001c~�;\"\u001e�{9��q�:6�W\t�\u001a�ϲ>*1ۚXI�&^Z\u0019t\u0016\u000b�:\u0012��dƾSI[�-�sɆ���\u001e�\u0012\u0018\u001a�F z�~��ɮ-�9ĭ��BH*>�h\u0002\u0001f��<>Dd錉㾠�%q\u0002VBL��\u001f�\u0007�r�d*ߥ\f�����a����L��ֱ�3�S\f�K戊if�\n�%\u0007�[�t\b�|u�\b�Ğ����)Ke{擥��t����\u0017� ��!\u000eK��/dv�5��8��GS�\u001bƤg��\u0014�\u0015\u0019B:\u0001��e+E\u0003U\n�Ho��I��\u0010{�,0�]���ry�\u0007�L�\u0003F�G//�z'<��e\f��=νM���f�ҳ\u0005�%��߿�O�c*�{Q&\u0010|\f��F)P\u0003{���Kq��Z��M��*�P��n\ni⺄���\u0007t\u0014����M�-\u0019�7�Ϙyt<\u0006�m*�Cp1�\u0006\u0001�\u0013S���6\u001f#��SO��h,�\f��K��0\u0010��b�tʂH߮���\u001b����ّ�s���Vs\u000b�lt^��0^(��ō�/\u001e�\u0014R�� �B���4����G���v�If�#�\u0011�+g\u001c5� ���e�,�Pر����\u0006\fB9�$��cf���%\u00053Zԏ��0�]��\u0001ri\u0002m�\u0001�F�e\bWxj�p�\u0017�s%�]QL+_�\\��&2�d�ꡅ�\"��x[[v->�ੵ\u000b+=z-���z�Q�}\u0011��;\u0003��&X]\u0006'���\u0010`���\fuX��\u0006!��}�F��/Uj\u000ei�F��\u0005���7\u000f\u001d�����H뫄\f\\\u0019�Emf�(���V=t$`�3P�FCG=�Uӌ\u001fv.k���fi��N+��<��w����<�\u0013��w�5�x�0�ysv\u000fD�'\u0004(\b}�eܺ6Nɀ$ʱ�Gx�\u0006q����%��\\w\u001cLh���}���W\u0000���ή��\u0005�\u0011zT*ޚ��*\u0012sN�\u0004���$���!Ǒbxlgλ�I-d���!\u0013j#���\u0005\u0013��X�ܓ<\u0019�L@���el\u0007e�; 6\u001a\u0013���X��N��\u001d\u001b\u0007�����If\u0017�#F�!\u001b\u000f��\u001cmA<1M�W%�\u001f�P��V�|v<�D�*;�\u001e%\u001bCK��\u0000��p��\u001a�[\u001cE�@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
    },
    {
        "path": "index.php",
        "content": "<!DOCTYPE html>\r\n<html lang=\"ru\">\r\n<head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"description\" content=\"Современный одностраничный интернет-магазин с блогом и личным кабинетом.\" />\r\n    <meta name=\"theme-color\" content=\"#A8DADC\" />\r\n\r\n    <title>Интернет-магазин</title>\r\n\r\n    <!-- Google Fonts -->\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\r\n\r\n    <!-- Подключение шрифта -->\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap\" rel=\"stylesheet\" />\r\n\r\n    <!-- Стили -->\r\n    <link rel=\"stylesheet\" href=\"styles/style.css\" />\r\n    <link rel=\"stylesheet\" href=\"styles/main.css\" />\r\n\r\n    <!-- Logo -->\r\n    <link rel=\"icon\" href=\"img/logocompany.png\" type=\"image/png\" />\r\n</head>\r\n\r\n<body>\r\n<div id=\"app\">\r\n    <!-- Хедер -->\r\n    <?php include 'scripts/header.php'; ?>\r\n    <!-- Авторизация -->\r\n    <section id=\"login-section\" class=\"page-section hidden\">\r\n        <div class=\"form-wrapper\">\r\n            <h2>Вход</h2>\r\n            <form id=\"login-form\">\r\n                <input type=\"email\" name=\"email\" placeholder=\"Электронная почта\" required>\r\n                <input type=\"password\" name=\"password\" placeholder=\"Пароль\" required>\r\n                <button type=\"submit\">Войти</button>\r\n            </form>\r\n            <div class=\"form-message\" id=\"login-message\"></div>\r\n        </div>\r\n    </section>\r\n    <!-- Регистрация -->\r\n    <section id=\"register-section\" class=\"page-section hidden\">\r\n        <div class=\"form-wrapper\">\r\n            <h2>Регистрация</h2>\r\n            <form id=\"register-form\">\r\n                <input type=\"text\" name=\"name\" placeholder=\"Имя\" required>\r\n                <input type=\"email\" name=\"email\" placeholder=\"Электронная почта\" required>\r\n                <input type=\"password\" name=\"password\" placeholder=\"Пароль\" required>\r\n                <button type=\"submit\">Зарегистрироваться</button>\r\n            </form>\r\n            <div class=\"form-message\" id=\"register-message\"></div>\r\n        </div>\r\n    </section>\r\n    <!-- Главная -->\r\n    <section id=\"home\" class=\"page-section\">\r\n        <div class=\"container-info\">\r\n            <h1 class=\"main-title\">Добро пожаловать в наш магазин</h1>\r\n            <div class=\"info-blocks\">\r\n                <div class=\"info-card\">\r\n                    <h2>Лучшие товары</h2>\r\n                    <p>Мы предлагаем только качественные и проверенные товары по отличным ценам.</p>\r\n                </div>\r\n                <div class=\"info-card\">\r\n                    <h2>Удобная доставка</h2>\r\n                    <p>Быстрая и надёжная доставка по всей стране. Отслеживайте заказ онлайн.</p>\r\n                </div>\r\n                <div class=\"info-card\">\r\n                    <h2>Поддержка 24/7</h2>\r\n                    <p>Наша команда поддержки готова помочь вам в любое время суток.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    <!-- Каталог -->\r\n    <section id=\"product-catalog\" class=\"page-section hidden\">\r\n        <div class=\"catalog-header\">\r\n            <h2>Каталог товаров</h2>\r\n            <div class=\"filters\">\r\n                <input type=\"text\" id=\"search-title\" placeholder=\"Поиск по названию\">\r\n                <input type=\"text\" id=\"search-category\" placeholder=\"Категория\">\r\n                <input type=\"number\" id=\"search-min-price\" placeholder=\"Мин. цена\">\r\n                <input type=\"number\" id=\"search-max-price\" placeholder=\"Макс. цена\">\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"product-container\" class=\"product-grid loading\"></div>\r\n        <div class=\"no-products hidden\">Нет подходящих товаров.</div>\r\n\r\n        <div id=\"product-modal\" class=\"modal hidden\">\r\n            <div class=\"modal-content\">\r\n                <button id=\"product-modal-close\" class=\"modal-close\">&times;</button>\r\n                <div class=\"product-details\">\r\n                    <img id=\"modal-product-image\" src=\"\" alt=\"Фото товара\" class=\"modal-product-image\">\r\n                    <div class=\"modal-product-info\">\r\n                        <h3 id=\"modal-product-title\"></h3>\r\n                        <p id=\"modal-product-category\" class=\"modal-product-category\"></p>\r\n                        <p id=\"modal-product-description\" class=\"modal-product-description\"></p>\r\n                        <p id=\"modal-product-price\" class=\"modal-product-price\"></p>\r\n                        <div class=\"modal-actions\">\r\n                            <button id=\"add-to-cart-btn\" class=\"btn primary\">Добавить в корзину</button>\r\n                            <button id=\"toggle-favorite-btn\" class=\"btn\">В избранное</button>\r\n                            <button id=\"delete-product-btn\" class=\"btn danger hidden\">Удалить товар</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <section class=\"comments-section\">\r\n                    <h4>Комментарии</h4>\r\n                    <div id=\"modal-comments-container\" class=\"comments-container\"></div>\r\n                    <form id=\"add-comment-form\" class=\"add-comment-form\">\r\n                        <textarea name=\"comment\" placeholder=\"Оставить комментарий\" rows=\"3\" required></textarea>\r\n                        <button type=\"submit\" class=\"btn primary\">Отправить</button>\r\n                    </form>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    <!-- Личный кабинет -->\r\n    <section id=\"account\" class=\"page-section hidden\">\r\n        <section id=\"favorites-section\" class=\"cabinet-section\">\r\n            <h3>Избранное</h3>\r\n            <div id=\"favorites-container\" class=\"favorites-grid\">\r\n                <!-- Товары будут подгружены сюда -->\r\n            </div>\r\n            <div id=\"no-favorites\" class=\"no-items hidden\">Избранных товаров нет.</div>\r\n        </section>\r\n        <section id=\"cart-section\" class=\"cabinet-section\">\r\n            <h3>Корзина</h3>\r\n            <div id=\"cart-container\" class=\"cart-list\">\r\n                <!-- Товары корзины подгрузятся сюда -->\r\n            </div>\r\n            <div id=\"no-cart-items\" class=\"no-items hidden\">Корзина пуста.</div>\r\n            <button id=\"checkout-btn\" class=\"btn\" disabled>Оформить заказ</button>\r\n        </section>\r\n        <section id=\"orders-section\" class=\"cabinet-section\">\r\n            <h3>Мои заказы</h3>\r\n            <div id=\"orders-container\">\r\n                <!-- Заказы загрузятся сюда -->\r\n            </div>\r\n            <div id=\"no-orders\" class=\"no-items hidden\">У вас пока нет заказов.</div>\r\n            <a href=\"/scripts/logout.php\" style=\"color: var(--color-error)\">Выйти из профиля</a>\r\n        </section>\r\n    </section>\r\n    <!-- Блог -->\r\n    <section id=\"blog\" class=\"page-section hidden\">\r\n        <div class=\"blog-slider-container\">\r\n            <div class=\"blog-slider\" id=\"blog-slider\"></div>\r\n            <button class=\"blog-prev\" onclick=\"changeBlogSlide(-1)\">&#10094;</button>\r\n            <button class=\"blog-next\" onclick=\"changeBlogSlide(1)\">&#10095;</button>\r\n            <div class=\"blog-dots\" id=\"blog-dots\"></div>\r\n        </div>\r\n        <div class=\"blog-list\" id=\"blog-list\"></div>\r\n        <div id=\"blog-modal\">\r\n            <div id=\"blog-modal-content\">\r\n                <span id=\"blog-modal-close\">&times;</span>\r\n                <h2 id=\"blog-modal-title\"></h2>\r\n                <img id=\"blog-modal-image\" src=\"\" alt=\"\">\r\n                <p id=\"blog-modal-text\"></p>\r\n                <small id=\"blog-modal-date\"></small>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    <!-- Контакты -->\r\n\r\n    <!-- Футер -->\r\n</div>\r\n\r\n<!-- Скрипты -->\r\n<script src=\"js/router.js\"></script>\r\n<script src=\"js/animations.js\"></script>\r\n<script src=\"js/main.js\" defer></script>\r\n<script src=\"js/burger.js\"></script>\r\n<script src=\"js/auth.js\"></script>\r\n</body>\r\n</html>\r\n"
    },
    {
        "path": "js/admin.js",
        "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    const addBtn = document.getElementById('add-product-btn');\r\n    const modal = document.getElementById('product-form-wrapper');\r\n    const cancelBtn = document.getElementById('cancel-form');\r\n    const form = document.getElementById('product-form');\r\n    const formTitle = document.getElementById('form-title');\r\n    const productList = document.getElementById('product-list');\r\n\r\n    let editProductId = null;\r\n\r\n    addBtn.addEventListener('click', () => {\r\n        formTitle.textContent = 'Добавить товар';\r\n        form.reset();\r\n        editProductId = null;\r\n        modal.classList.remove('hidden');\r\n    });\r\n\r\n    cancelBtn.addEventListener('click', () => {\r\n        modal.classList.add('hidden');\r\n    });\r\n\r\n    form.addEventListener('submit', (e) => {\r\n        e.preventDefault();\r\n\r\n        const formData = new FormData(form);\r\n        const url = editProductId ? 'scripts/update-product.php' : 'scripts/add-product.php';\r\n        if (editProductId) formData.append('id', editProductId);\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    modal.classList.add('hidden');\r\n                    loadProducts();\r\n                } else {\r\n                    alert('Ошибка: ' + (data.error || 'Неизвестная ошибка'));\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error('Ошибка при сохранении товара:', err);\r\n            });\r\n    });\r\n\r\n    function loadProducts() {\r\n        fetch('scripts/get-products.php')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                productList.innerHTML = '';\r\n\r\n                if (!data.length) {\r\n                    productList.innerHTML = '<p>Товары пока не добавлены.</p>';\r\n                    return;\r\n                }\r\n\r\n                data.forEach(product => {\r\n                    const div = document.createElement('div');\r\n                    div.className = 'product-item';\r\n                    div.innerHTML = `\r\n                        <div class=\"product-info\">\r\n                            <p><strong>Название:</strong> ${product.title}</p>\r\n                            <p><strong>Цена:</strong> ${product.price}₽</p>\r\n                            <p><strong>Категория:</strong> ${product.category}</p>\r\n                        </div>\r\n                        <div class=\"product-actions\">\r\n                            <button class=\"btn edit\" data-id=\"${product.id}\">Редактировать</button>\r\n                            <button class=\"btn danger\" data-id=\"${product.id}\">Удалить</button>\r\n                            <button class=\"btn comments\" data-id=\"${product.id}\">Комментарии</button>\r\n                        </div>\r\n                        <div class=\"product-comments hidden\" id=\"comments-block-${product.id}\">\r\n                            <h4>Комментарии</h4>\r\n                            <div id=\"comments-${product.id}\" class=\"comments-container\">\r\n                                <p>Загрузка комментариев...</p>\r\n                            </div>\r\n                        </div>\r\n                    `;\r\n                    productList.appendChild(div);\r\n                });\r\n\r\n                document.querySelectorAll('.btn.edit').forEach(btn => {\r\n                    btn.addEventListener('click', () => editProduct(btn.dataset.id));\r\n                });\r\n\r\n                document.querySelectorAll('.btn.danger').forEach(btn => {\r\n                    btn.addEventListener('click', () => deleteProduct(btn.dataset.id));\r\n                });\r\n\r\n                document.querySelectorAll('.btn.comments').forEach(btn => {\r\n                    btn.addEventListener('click', () => toggleComments(btn.dataset.id));\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.error('Ошибка при загрузке товаров:', err);\r\n            });\r\n    }\r\n\r\n    function editProduct(id) {\r\n        fetch('scripts/get-products.php')\r\n            .then(res => res.json())\r\n            .then(products => {\r\n                const product = products.find(p => p.id == id);\r\n                if (!product) return;\r\n\r\n                formTitle.textContent = 'Редактировать товар';\r\n                form.name.value = product.title;\r\n                form.price.value = product.price;\r\n                form.category.value = product.category;\r\n                form.description.value = product.description || '';\r\n                editProductId = product.id;\r\n                modal.classList.remove('hidden');\r\n            });\r\n    }\r\n\r\n    function deleteProduct(id) {\r\n        if (!confirm('Удалить товар?')) return;\r\n\r\n        fetch('scripts/delete-product.php', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n            body: `id=${encodeURIComponent(id)}`\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.success) loadProducts();\r\n                else alert('Ошибка удаления: ' + data.error);\r\n            });\r\n    }\r\n\r\n    function toggleComments(productId) {\r\n        const block = document.getElementById(`comments-block-${productId}`);\r\n        if (block.classList.contains('hidden')) {\r\n            block.classList.remove('hidden');\r\n            loadComments(productId);\r\n        } else {\r\n            block.classList.add('hidden');\r\n        }\r\n    }\r\n\r\n    function loadComments(productId) {\r\n        fetch(`scripts/get-comments.php?product_id=${productId}`)\r\n            .then(response => response.json())\r\n            .then(comments => {\r\n                const container = document.querySelector(`#comments-${productId}`);\r\n                container.innerHTML = '';\r\n\r\n                if (!comments.length) {\r\n                    container.innerHTML = '<p class=\"no-comments\">Нет комментариев.</p>';\r\n                    return;\r\n                }\r\n\r\n                comments.forEach(comment => {\r\n                    const commentEl = document.createElement('div');\r\n                    commentEl.classList.add('comment');\r\n                    commentEl.innerHTML = `\r\n                        <p><strong>Пользователь #${comment.user_id}:</strong> ${comment.comment}</p>\r\n                        <small>${new Date(comment.created_at).toLocaleString()}</small>\r\n                        <div class=\"comment-actions\">\r\n                            <button class=\"btn small danger\" onclick=\"deleteComment(${comment.id}, ${productId})\">Удалить</button>\r\n                        </div>\r\n                    `;\r\n                    container.appendChild(commentEl);\r\n                });\r\n            })\r\n            .catch(error => console.error('Ошибка при загрузке комментариев:', error));\r\n    }\r\n\r\n    window.deleteComment = function(commentId, productId) {\r\n        if (!confirm('Удалить комментарий?')) return;\r\n\r\n        fetch('scripts/delete-comment.php', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ comment_id: commentId })\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.success) loadComments(productId);\r\n                else alert('Ошибка при удалении');\r\n            });\r\n    };\r\n\r\n    loadProducts();\r\n});\r\n\r\nfunction loadOrders() {\r\n    fetch('scripts/get-orders-admin.php')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                renderOrders(data.orders);\r\n            } else {\r\n                console.error(data.message);\r\n            }\r\n        })\r\n        .catch(err => console.error('Ошибка загрузки заказов:', err));\r\n}\r\n\r\nfunction renderOrders(orders) {\r\n    const container = document.getElementById('order-list');\r\n    const template = document.getElementById('order-template');\r\n    container.innerHTML = '';\r\n\r\n    orders.forEach(order => {\r\n        const clone = template.content.cloneNode(true);\r\n        clone.querySelector('.order-id-number').textContent = order.id;\r\n        clone.querySelector('.order-user-id').textContent = order.user_id;\r\n        clone.querySelector('.order-date').textContent = new Date(order.created_at).toLocaleString();\r\n\r\n        const statusSelect = clone.querySelector('.order-status-select');\r\n        statusSelect.value = order.status;\r\n\r\n        statusSelect.addEventListener('change', () => {\r\n            const newStatus = statusSelect.value;\r\n            fetch('scripts/update-order-status.php', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ order_id: order.id, status: newStatus })\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (!data.success) {\r\n                        alert('Ошибка обновления статуса: ' + data.message);\r\n                        statusSelect.value = order.status; // откат\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    alert('Ошибка сети при обновлении статуса');\r\n                    statusSelect.value = order.status;\r\n                });\r\n        });\r\n\r\n        const itemsContainer = clone.querySelector('.order-items');\r\n        order.items.forEach(item => {\r\n            const div = document.createElement('div');\r\n            div.className = 'order-item';\r\n            div.innerHTML = `<strong>${item.product_name}</strong> — ${item.quantity} × ${item.price} ₽`;\r\n            itemsContainer.appendChild(div);\r\n        });\r\n\r\n        container.appendChild(clone);\r\n    });\r\n}\r\n\r\nloadOrders();\r\n\r\n// Добавим в переключение табов\r\ndocument.querySelectorAll('.admin-tab').forEach(tab => {\r\n    tab.addEventListener('click', () => {\r\n        document.querySelectorAll('.admin-section').forEach(section => section.classList.add('hidden'));\r\n        document.getElementById(`${tab.dataset.tab}-section`).classList.remove('hidden');\r\n\r\n        if (tab.dataset.tab === 'users') {\r\n            loadUsers();\r\n        }\r\n    });\r\n});\r\n\r\n// Загрузка пользователей\r\nfunction loadUsers() {\r\n    fetch('scripts/get-users.php')\r\n        .then(res => res.json())\r\n        .then(users => {\r\n            const userList = document.getElementById('user-list');\r\n            userList.innerHTML = '';\r\n\r\n            if (!users.length) {\r\n                userList.innerHTML = '<p>Нет пользователей.</p>';\r\n                return;\r\n            }\r\n\r\n            users.forEach(user => {\r\n                const div = document.createElement('div');\r\n                div.className = 'user-item';\r\n                div.innerHTML = `\r\n  <p><strong>ID:</strong> ${user.id}</p>\r\n  <p><strong>Логин:</strong> ${user.name}</p>\r\n  <p><strong>Email:</strong> ${user.email}</p>\r\n  <p><strong>Дата регистрации:</strong> ${new Date(user.created_at).toLocaleDateString()}</p>\r\n  <label><strong>Роль:</strong>\r\n    <select onchange=\"updateUserRole(${user.id}, this.value)\">\r\n      <option value=\"user\" ${user.role === 'user' ? 'selected' : ''}>user</option>\r\n      <option value=\"admin\" ${user.role === 'admin' ? 'selected' : ''}>admin</option>\r\n    </select>\r\n  </label>\r\n  <button class=\"btn danger\" onclick=\"deleteUser(${user.id})\">Удалить</button>\r\n`;\r\n\r\n                userList.appendChild(div);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.error('Ошибка при загрузке пользователей:', err);\r\n        });\r\n}\r\n\r\nwindow.deleteUser = function(userId) {\r\n    if (!confirm('Удалить пользователя?')) return;\r\n\r\n    fetch('scripts/delete-user.php', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id: userId })\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) loadUsers();\r\n            else alert('Ошибка при удалении: ' + data.error);\r\n        })\r\n        .catch(err => {\r\n            console.error('Ошибка при удалении пользователя:', err);\r\n        });\r\n};\r\n\r\nwindow.updateUserRole = function(userId, role) {\r\n    fetch('scripts/update-user-role.php', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id: userId, role })\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (!data.success) {\r\n                alert('Ошибка при обновлении роли: ' + data.error);\r\n            }\r\n        })\r\n        .catch(err => console.error('Ошибка при обновлении роли:', err));\r\n};\r\n\r\nloadUsers();\r\n\r\n    const blogList = document.getElementById('blog-list');\r\n    const blogFormWrapper = document.getElementById('blog-form-wrapper');\r\n    const blogForm = document.getElementById('blog-form');\r\n    const blogFormTitle = document.getElementById('blog-form-title');\r\n    const cancelBlogForm = document.getElementById('cancel-blog-form');\r\n    const addBlogBtn = document.getElementById('add-blog-btn');\r\n\r\n    let editBlogId = null;\r\n\r\n    addBlogBtn.addEventListener('click', () => {\r\n        blogForm.reset();\r\n        blogFormTitle.textContent = 'Добавить пост';\r\n        blogForm.id.value = '';\r\n        editBlogId = null;\r\n        blogFormWrapper.classList.remove('hidden');\r\n    });\r\n\r\n    cancelBlogForm.addEventListener('click', () => {\r\n        blogFormWrapper.classList.add('hidden');\r\n    });\r\n\r\n    blogForm.addEventListener('submit', e => {\r\n        e.preventDefault();\r\n        const formData = new FormData(blogForm);\r\n        const url = formData.get('id') ? 'scripts/update-blog-post.php' : 'scripts/add-blog-post.php';\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    loadBlogPosts();\r\n                    blogFormWrapper.classList.add('hidden');\r\n                } else {\r\n                    alert('Ошибка: ' + data.error);\r\n                }\r\n            });\r\n    });\r\n\r\n    function loadBlogPosts() {\r\n        fetch('scripts/get-blog-posts.php')\r\n            .then(res => res.json())\r\n            .then(posts => {\r\n                blogList.innerHTML = '';\r\n                if (!posts.length) {\r\n                    blogList.innerHTML = '<p>Постов пока нет.</p>';\r\n                    return;\r\n                }\r\n\r\n                posts.forEach(post => {\r\n                    const div = document.createElement('div');\r\n                    div.className = 'admin-item';\r\n                    div.innerHTML = `\r\n                        <strong>${post.title}</strong>\r\n                        <small>${new Date(post.created_at).toLocaleString()}</small>\r\n                        <div class=\"admin-actions\">\r\n                            <button class=\"btn small edit\" data-id=\"${post.id}\">Редактировать</button>\r\n                            <button class=\"btn small danger delete\" data-id=\"${post.id}\">Удалить</button>\r\n                        </div>\r\n                    `;\r\n                    blogList.appendChild(div);\r\n                });\r\n\r\n                blogList.querySelectorAll('.btn.edit').forEach(btn => {\r\n                    btn.addEventListener('click', () => editBlogPost(btn.dataset.id));\r\n                });\r\n\r\n                blogList.querySelectorAll('.btn.delete').forEach(btn => {\r\n                    btn.addEventListener('click', () => deleteBlogPost(btn.dataset.id));\r\n                });\r\n            });\r\n    }\r\n\r\n    function editBlogPost(id) {\r\n        fetch('scripts/get-blog-posts.php')\r\n            .then(res => res.json())\r\n            .then(posts => {\r\n                const post = posts.find(p => p.id == id);\r\n                if (!post) return;\r\n\r\n                blogFormTitle.textContent = 'Редактировать пост';\r\n                blogForm.title.value = post.title;\r\n                blogForm.content.value = post.content || '';\r\n                blogForm.id.value = post.id;\r\n                blogFormWrapper.classList.remove('hidden');\r\n            });\r\n    }\r\n\r\n    function deleteBlogPost(id) {\r\n        if (!confirm('Удалить пост?')) return;\r\n\r\n        fetch('scripts/delete-blog-post.php', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n            body: `id=${id}`\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.success) loadBlogPosts();\r\n                else alert('Ошибка удаления: ' + data.error);\r\n            });\r\n    }\r\n\r\n    loadBlogPosts();\r\n"
    },
    {
        "path": "js/animations.js",
        "content": ""
    },
    {
        "path": "js/auth.js",
        "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    const loginForm = document.getElementById('login-form');\r\n    const registerForm = document.getElementById('register-form');\r\n\r\n    if (loginForm) {\r\n        loginForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const formData = new FormData(loginForm);\r\n            const res = await fetch('scripts/auth.php', {\r\n                method: 'POST',\r\n                body: formData\r\n            });\r\n            const text = await res.text();\r\n            document.getElementById('login-message').innerText = text;\r\n            if (text.includes('Успешный вход')) location.reload();\r\n        });\r\n    }\r\n\r\n    if (registerForm) {\r\n        registerForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const formData = new FormData(registerForm);\r\n            const res = await fetch('scripts/register.php', {\r\n                method: 'POST',\r\n                body: formData\r\n            });\r\n            const text = await res.text();\r\n            document.getElementById('register-message').innerText = text;\r\n        });\r\n    }\r\n});\r\n"
    },
    {
        "path": "js/burger.js",
        "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    const burger = document.getElementById('burger');\r\n    const nav = document.getElementById('main-nav');\r\n\r\n    burger.addEventListener('click', () => {\r\n        nav.classList.toggle('active');\r\n    });\r\n});\r\n"
    },
    {
        "path": "js/main.js",
        "content": "function debounce(func, delay) {\r\n    let timeout;\r\n    return function () {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(func, delay);\r\n    };\r\n}\r\nloadCatalogProducts();\r\nloadFavorites();\r\nloadCart();\r\nloadOrders();\r\n\r\ndocument.getElementById('search-title').addEventListener('input', debounce(loadCatalogProducts, 400));\r\ndocument.getElementById('search-category').addEventListener('input', debounce(loadCatalogProducts, 400));\r\ndocument.getElementById('search-min-price').addEventListener('input', debounce(loadCatalogProducts, 400));\r\ndocument.getElementById('search-max-price').addEventListener('input', debounce(loadCatalogProducts, 400));\r\n\r\nfunction loadCatalogProducts() {\r\n    const title = document.getElementById('search-title').value.trim();\r\n    const category = document.getElementById('search-category').value.trim();\r\n    const minPrice = document.getElementById('search-min-price').value.trim();\r\n    const maxPrice = document.getElementById('search-max-price').value.trim();\r\n\r\n    const params = new URLSearchParams({ title, category, min_price: minPrice, max_price: maxPrice });\r\n\r\n    const container = document.getElementById('product-container');\r\n    const noProducts = document.querySelector('.no-products');\r\n\r\n    container.classList.add('loading');\r\n    fetch(`scripts/get-catalog-products.php?${params.toString()}`)\r\n        .then(res => res.json())\r\n        .then(products => {\r\n            container.innerHTML = '';\r\n            container.classList.remove('loading');\r\n\r\n            if (products.length === 0) {\r\n                noProducts.classList.remove('hidden');\r\n                return;\r\n            }\r\n\r\n            noProducts.classList.add('hidden');\r\n            products.forEach(product => {\r\n                const card = document.createElement('div');\r\n                card.className = 'product-card';\r\n                card.innerHTML = `\r\n                    <img src=\"img/products/${product.image}\" alt=\"${product.title}\">\r\n                    <h3>${product.title}</h3>\r\n                    <p class=\"price\">${product.price} ₽</p>\r\n                    <button class=\"btn small\" onclick=\"showProductModal(${product.id})\">Подробнее</button>\r\n                `;\r\n                container.appendChild(card);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.error('Ошибка при загрузке товаров:', err);\r\n            container.classList.remove('loading');\r\n        });\r\n}\r\n\r\nconst modal = document.getElementById('product-modal');\r\nconst closeModalBtn = document.getElementById('product-modal-close');\r\n\r\nfunction showProductModal(productId) {\r\n    fetch(`scripts/get-product.php?id=${productId}`)\r\n        .then(res => res.json())\r\n        .then(product => {\r\n            document.getElementById('modal-product-image').src = product.image ? `img/products/${product.image}` : 'img/products/placeholder.png';\r\n            document.getElementById('modal-product-title').textContent = product.title;\r\n            document.getElementById('modal-product-category').textContent = product.category;\r\n            document.getElementById('modal-product-description').textContent = product.description;\r\n            document.getElementById('modal-product-price').textContent = product.price + ' ₽';\r\n\r\n            modal.dataset.productId = productId;\r\n\r\n            updateFavoriteBtn(productId);\r\n            loadComments(productId);\r\n\r\n            modal.classList.remove('hidden');\r\n        })\r\n        .catch(err => {\r\n            console.error('Ошибка загрузки товара', err);\r\n            alert('Ошибка загрузки товара');\r\n        });\r\n}\r\n\r\ncloseModalBtn.addEventListener('click', () => {\r\n    modal.classList.add('hidden');\r\n});\r\n\r\nwindow.addEventListener('click', (e) => {\r\n    if (e.target === modal) {\r\n        modal.classList.add('hidden');\r\n    }\r\n});\r\n\r\nfunction loadComments(productId) {\r\n    fetch(`scripts/get-comments.php?product_id=${productId}`)\r\n        .then(res => res.json())\r\n        .then(comments => {\r\n            const container = document.getElementById('modal-comments-container');\r\n            container.innerHTML = '';\r\n\r\n            if (comments.length === 0) {\r\n                container.innerHTML = '<p>Комментариев пока нет.</p>';\r\n                return;\r\n            }\r\n\r\n            comments.forEach(comment => {\r\n                const div = document.createElement('div');\r\n                div.classList.add('comment');\r\n                div.innerHTML = `\r\n                    <p><strong>Пользователь #${comment.user_id}:</strong> ${comment.comment}</p>\r\n                    <small>${new Date(comment.created_at).toLocaleString()}</small>\r\n                `;\r\n                container.appendChild(div);\r\n            });\r\n        })\r\n        .catch(e => {\r\n            console.error('Ошибка при загрузке комментариев:', e);\r\n        });\r\n}\r\n\r\ndocument.getElementById('add-comment-form').addEventListener('submit', e => {\r\n    e.preventDefault();\r\n\r\n    const productId = modal.dataset.productId;\r\n    const commentText = e.target.comment.value.trim();\r\n    if (!commentText) return alert('Введите комментарий.');\r\n\r\n    fetch('scripts/add-comment.php', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ product_id: productId, comment: commentText }),\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                e.target.reset();\r\n                loadComments(productId);\r\n            } else {\r\n                alert('Ошибка при добавлении комментария');\r\n            }\r\n        })\r\n        .catch(() => alert('Ошибка при отправке комментария'));\r\n});\r\n\r\n\r\ndocument.getElementById('add-to-cart-btn').addEventListener('click', () => {\r\n    const productId = modal.dataset.productId;\r\n    fetch('scripts/add-to-cart.php', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ product_id: productId })\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                alert('Товар добавлен в корзину');\r\n            } else {\r\n                alert(data.message || 'Ошибка');\r\n            }\r\n        })\r\n        .catch(() => alert('Ошибка при добавлении в корзину'));\r\n});\r\n\r\ndocument.getElementById('toggle-favorite-btn').addEventListener('click', () => {\r\n    const productId = modal.dataset.productId;\r\n    fetch('scripts/toggle-favorite.php', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ product_id: productId })\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                updateFavoriteBtn(productId);\r\n            } else {\r\n                alert(data.message || 'Ошибка');\r\n            }\r\n        })\r\n        .catch(() => alert('Ошибка при обновлении избранного'));\r\n});\r\n\r\nfunction updateFavoriteBtn(productId) {\r\n    fetch(`scripts/is-favorite.php?product_id=${productId}`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            const btn = document.getElementById('toggle-favorite-btn');\r\n            if (data.favorited) {\r\n                btn.classList.add('active');\r\n                btn.textContent = 'В избранном';\r\n            } else {\r\n                btn.classList.remove('active');\r\n                btn.textContent = 'В избранное';\r\n            }\r\n        });\r\n}\r\n\r\nfunction loadFavorites() {\r\n    const container = document.getElementById('favorites-container');\r\n    const noFavorites = document.getElementById('no-favorites');\r\n\r\n    container.classList.add('loading');\r\n\r\n    fetch('scripts/get-favorites.php')\r\n        .then(res => res.json())\r\n        .then(products => {\r\n            container.innerHTML = '';\r\n            container.classList.remove('loading');\r\n\r\n            if (products.length === 0) {\r\n                noFavorites.classList.remove('hidden');\r\n                return;\r\n            }\r\n\r\n            noFavorites.classList.add('hidden');\r\n\r\n            products.forEach(product => {\r\n                const card = document.createElement('div');\r\n                card.className = 'product-card'; // используем тот же класс для карточек, чтобы стили были единые\r\n                card.innerHTML = `\r\n                    <img src=\"img/products/${product.image}\" alt=\"${product.title}\">\r\n                    <h3>${product.title}</h3>\r\n                    <p class=\"price\">${product.price} ₽</p>\r\n                    <button class=\"btn small\" onclick=\"showProductModal(${product.id})\">Подробнее</button>\r\n                    <button class=\"btn danger small\" onclick=\"removeFromFavorites(${product.id})\">Удалить</button>\r\n                `;\r\n                container.appendChild(card);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.error('Ошибка при загрузке избранного:', err);\r\n            container.classList.remove('loading');\r\n        });\r\n}\r\n\r\nfunction removeFromFavorites(productId) {\r\n    fetch('scripts/remove-favorite.php', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ product_id: productId }),\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                loadFavorites();\r\n            } else {\r\n                alert(data.message || 'Ошибка при удалении из избранного');\r\n            }\r\n        })\r\n        .catch(() => alert('Ошибка при удалении из избранного'));\r\n}\r\n\r\nfunction loadCart() {\r\n    const container = document.getElementById('cart-container');\r\n    const noItems = document.getElementById('no-cart-items');\r\n    const checkoutBtn = document.getElementById('checkout-btn');\r\n\r\n    container.innerHTML = '';\r\n    container.classList.add('loading');\r\n\r\n    fetch('scripts/get-cart.php')\r\n        .then(res => {\r\n            if (!res.ok) throw new Error('Unauthorized or error');\r\n            return res.json();\r\n        })\r\n        .then(items => {\r\n            container.classList.remove('loading');\r\n            if (items.length === 0) {\r\n                noItems.classList.remove('hidden');\r\n                checkoutBtn.disabled = true;\r\n                return;\r\n            }\r\n            noItems.classList.add('hidden');\r\n            checkoutBtn.disabled = false;\r\n\r\n            items.forEach(item => {\r\n                const div = document.createElement('div');\r\n                div.className = 'cart-item';\r\n                div.dataset.cartId = item.cart_id;\r\n                div.innerHTML = `\r\n                    <img src=\"img/products/${item.image}\" alt=\"${item.title}\" class=\"cart-item-img\" />\r\n                    <div class=\"cart-item-info\">\r\n                      <h4>${item.title}</h4>\r\n                      <p>Цена: ${item.price} ₽</p>\r\n                      <div class=\"cart-quantity-control\">\r\n                        <button class=\"qty-btn minus-btn\">−</button>\r\n                        <input type=\"number\" class=\"qty-input\" min=\"1\" value=\"${item.quantity}\" />\r\n                        <button class=\"qty-btn plus-btn\">+</button>\r\n                      </div>\r\n                      <button class=\"btn small remove-cart-btn\">Удалить</button>\r\n                    </div>\r\n                `;\r\n                container.appendChild(div);\r\n            });\r\n\r\n            attachCartEvents();\r\n        })\r\n        .catch(err => {\r\n            console.error('Ошибка загрузки корзины:', err);\r\n            container.classList.remove('loading');\r\n        });\r\n}\r\n\r\nfunction attachCartEvents() {\r\n    const container = document.getElementById('cart-container');\r\n\r\n    container.querySelectorAll('.minus-btn').forEach(btn => {\r\n        btn.onclick = () => {\r\n            const input = btn.nextElementSibling;\r\n            if (input.value > 1) {\r\n                input.value = +input.value - 1;\r\n                updateCartQuantity(input);\r\n            }\r\n        };\r\n    });\r\n\r\n    container.querySelectorAll('.plus-btn').forEach(btn => {\r\n        btn.onclick = () => {\r\n            const input = btn.previousElementSibling;\r\n            input.value = +input.value + 1;\r\n            updateCartQuantity(input);\r\n        };\r\n    });\r\n\r\n    container.querySelectorAll('.qty-input').forEach(input => {\r\n        input.onchange = () => updateCartQuantity(input);\r\n    });\r\n\r\n    container.querySelectorAll('.remove-cart-btn').forEach(btn => {\r\n        btn.onclick = () => {\r\n            const cartItem = btn.closest('.cart-item');\r\n            removeCartItem(cartItem.dataset.cartId);\r\n        };\r\n    });\r\n}\r\n\r\nfunction updateCartQuantity(input) {\r\n    const cartItem = input.closest('.cart-item');\r\n    const cartId = cartItem.dataset.cartId;\r\n    const quantity = parseInt(input.value);\r\n    if (quantity < 1) {\r\n        input.value = 1;\r\n        return;\r\n    }\r\n\r\n    fetch('scripts/update-cart.php', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({ cart_id: cartId, quantity })\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (!data.success) {\r\n                alert(data.message || 'Ошибка обновления количества');\r\n            } else {\r\n                loadCart();\r\n            }\r\n        })\r\n        .catch(() => alert('Ошибка при обновлении корзины'));\r\n}\r\n\r\nfunction removeCartItem(cartId) {\r\n    fetch('scripts/remove-from-cart.php', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({ cart_id: cartId })\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (!data.success) {\r\n                alert(data.message || 'Ошибка удаления товара из корзины');\r\n            } else {\r\n                loadCart();\r\n            }\r\n        })\r\n        .catch(() => alert('Ошибка при удалении из корзины'));\r\n}\r\n\r\ndocument.getElementById('checkout-btn').addEventListener('click', () => {\r\n    fetch('scripts/get-cart-items.php')\r\n        .then(res => res.json())\r\n        .then(cartItems => {\r\n            if (cartItems.length === 0) {\r\n                alert('Корзина пуста');\r\n                return;\r\n            }\r\n\r\n            fetch('scripts/create-order.php', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ items: cartItems })\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        alert('Заказ оформлен успешно!');\r\n                        loadCartItems(); // функция обновления корзины, которую нужно реализовать\r\n                    } else {\r\n                        alert('Ошибка при оформлении заказа: ' + (data.message || ''));\r\n                    }\r\n                })\r\n                .catch(() => alert('Ошибка при отправке заказа'));\r\n        })\r\n        .catch(() => alert('Ошибка загрузки корзины'));\r\n});\r\n\r\nfunction loadOrders() {\r\n    const container = document.getElementById('orders-container');\r\n    const noOrders = document.getElementById('no-orders');\r\n\r\n    container.innerHTML = '';\r\n    fetch('scripts/get-orders.php')\r\n        .then(res => res.json())\r\n        .then(orders => {\r\n            if (orders.length === 0) {\r\n                noOrders.classList.remove('hidden');\r\n                return;\r\n            }\r\n            noOrders.classList.add('hidden');\r\n\r\n            orders.forEach(order => {\r\n                const orderDiv = document.createElement('div');\r\n                orderDiv.className = 'order-card';\r\n\r\n                const itemsHtml = order.items.map(item => `\r\n                    <div class=\"order-item\">\r\n                        <img src=\"img/products/${item.image || 'placeholder.png'}\" alt=\"${item.title}\" class=\"order-item-img\">\r\n                        <div class=\"order-item-info\">\r\n                            <h4>${item.title}</h4>\r\n                            <p>Количество: ${item.quantity}</p>\r\n                            <p>Цена за шт.: ${item.price} ₽</p>\r\n                        </div>\r\n                    </div>\r\n                `).join('');\r\n\r\n                orderDiv.innerHTML = `\r\n                    <div class=\"order-header\">\r\n                        <span>Заказ #${order.id}</span>\r\n                        <span>Статус: <strong>${order.status}</strong></span>\r\n                        <span>Дата: ${new Date(order.created_at).toLocaleString()}</span>\r\n                    </div>\r\n                    <div class=\"order-items\">${itemsHtml}</div>\r\n                `;\r\n\r\n                container.appendChild(orderDiv);\r\n            });\r\n        })\r\n        .catch(() => {\r\n            noOrders.textContent = 'Ошибка при загрузке заказов.';\r\n            noOrders.classList.remove('hidden');\r\n        });\r\n}\r\n\r\nlet blogSlideIndex = 0;\r\nlet blogSlides = [];\r\n\r\nfunction renderBlogSlider() {\r\n    fetch('scripts/get-blog-posts.php')\r\n        .then(res => res.json())\r\n        .then(posts => {\r\n            blogSlides = posts;\r\n            const slider = document.getElementById('blog-slider');\r\n            const dots = document.getElementById('blog-dots');\r\n            slider.innerHTML = '';\r\n            dots.innerHTML = '';\r\n\r\n            posts.forEach((post, index) => {\r\n                const slide = document.createElement('div');\r\n                slide.classList.add('blog-slide');\r\n                slide.innerHTML = `\r\n          <img src=\"img/blog/${post.image}\" alt=\"\">\r\n          <div class=\"blog-slide-title\">${post.title}</div>\r\n        `;\r\n                slide.addEventListener('click', () => openBlogModal(post));\r\n                slider.appendChild(slide);\r\n\r\n                const dot = document.createElement('span');\r\n                dot.classList.add('blog-dot');\r\n                if (index === 0) dot.classList.add('active');\r\n                dot.addEventListener('click', () => showBlogSlide(index));\r\n                dots.appendChild(dot);\r\n            });\r\n\r\n            showBlogSlide(0);\r\n        });\r\n}\r\n\r\nfunction showBlogSlide(index) {\r\n    const slider = document.getElementById('blog-slider');\r\n    const dots = document.querySelectorAll('.blog-dot');\r\n    if (index >= blogSlides.length) blogSlideIndex = 0;\r\n    else if (index < 0) blogSlideIndex = blogSlides.length - 1;\r\n    else blogSlideIndex = index;\r\n\r\n    slider.style.transform = `translateX(-${blogSlideIndex * 100}%)`;\r\n    dots.forEach(dot => dot.classList.remove('active'));\r\n    dots[blogSlideIndex].classList.add('active');\r\n}\r\n\r\nfunction changeBlogSlide(n) {\r\n    showBlogSlide(blogSlideIndex + n);\r\n}\r\n\r\nfunction openBlogModal(post) {\r\n    document.getElementById('blog-modal-title').innerText = post.title;\r\n    document.getElementById('blog-modal-image').src = `img/blog/${post.image}`;\r\n    document.getElementById('blog-modal-text').innerText = post.content;\r\n    document.getElementById('blog-modal-date').innerText = new Date(post.created_at).toLocaleDateString();\r\n    document.getElementById('blog-modal').style.display = 'block';\r\n}\r\n\r\ndocument.getElementById('blog-modal-close').addEventListener('click', () => {\r\n    document.getElementById('blog-modal').style.display = 'none';\r\n});\r\n\r\nwindow.addEventListener('click', (e) => {\r\n    if (e.target === document.getElementById('blog-modal')) {\r\n        document.getElementById('blog-modal').style.display = 'none';\r\n    }\r\n});\r\n\r\nrenderBlogSlider();\r\n\r\nfunction renderBlogList() {\r\n    fetch('scripts/get-blog-list.php')\r\n        .then(res => res.json())\r\n        .then(posts => {\r\n            const listContainer = document.getElementById('blog-list');\r\n            listContainer.innerHTML = '';\r\n\r\n            posts.forEach(post => {\r\n                const excerpt = post.content.length > 120\r\n                    ? post.content.slice(0, 120) + '...'\r\n                    : post.content;\r\n\r\n                const card = document.createElement('div');\r\n                card.className = 'blog-card';\r\n                card.innerHTML = `\r\n          <img src=\"img/blog/${post.image}\" alt=\"\">\r\n          <div class=\"blog-card-content\">\r\n            <div class=\"blog-card-title\">${post.title}</div>\r\n            <div class=\"blog-card-excerpt\">${excerpt}</div>\r\n            <div class=\"blog-card-date\">${new Date(post.created_at).toLocaleDateString()}</div>\r\n          </div>\r\n        `;\r\n                card.addEventListener('click', () => openBlogModal(post));\r\n                listContainer.appendChild(card);\r\n            });\r\n        });\r\n}\r\n\r\nrenderBlogList();\r\n"
    },
    {
        "path": "js/router.js",
        "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    const links = document.querySelectorAll('[data-route]');\r\n    const sections = document.querySelectorAll('.page-section');\r\n\r\n    function showSection(route) {\r\n        sections.forEach(section => {\r\n            if (section.id === route) {\r\n                section.classList.add('active');\r\n                section.classList.remove('hidden');\r\n            } else {\r\n                section.classList.remove('active');\r\n                section.classList.add('hidden');\r\n            }\r\n        });\r\n    }\r\n\r\n    links.forEach(link => {\r\n        link.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            const route = link.dataset.route;\r\n            showSection(route);\r\n            document.getElementById('main-nav')?.classList.remove('active');\r\n        });\r\n    });\r\n\r\n    showSection('home');\r\n});\r\n"
    },
    {
        "path": "scripts/add-blog-post.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$title = $_POST['title'] ?? '';\r\n$content = $_POST['content'] ?? '';\r\n$image = null;\r\n\r\nif (isset($_FILES['image']) && $_FILES['image']['error'] === 0) {\r\n    $uploadDir = '../img/blog/';\r\n    if (!is_dir($uploadDir)) mkdir($uploadDir, 0777, true);\r\n\r\n    $imageName = time() . '_' . basename($_FILES['image']['name']);\r\n    $uploadPath = $uploadDir . $imageName;\r\n\r\n    if (move_uploaded_file($_FILES['image']['tmp_name'], $uploadPath)) {\r\n        $image = $imageName;\r\n    }\r\n}\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"INSERT INTO blog_posts (title, content, image) VALUES (?, ?, ?)\");\r\n    $stmt->execute([$title, $content, $image]);\r\n    echo json_encode(['success' => true]);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['success' => false, 'error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/add-comment.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n// Получаем JSON из тела запроса\r\n$data = json_decode(file_get_contents('php://input'), true);\r\n\r\n$product_id = $data['product_id'] ?? 0;\r\n$comment = trim($data['comment'] ?? '');\r\n$user_id = 1; // Пока заглушка — заменить на ID текущего пользователя из сессии\r\n\r\nif (!$product_id || !$comment) {\r\n    http_response_code(400);\r\n    echo json_encode(['success' => false, 'error' => 'Неверные данные']);\r\n    exit;\r\n}\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"INSERT INTO product_comments (product_id, user_id, comment, created_at) VALUES (?, ?, ?, NOW())\");\r\n    $stmt->execute([$product_id, $user_id, $comment]);\r\n\r\n    echo json_encode(['success' => true]);\r\n} catch (PDOException $e) {\r\n    http_response_code(500);\r\n    echo json_encode(['success' => false, 'error' => 'Ошибка добавления комментария: ' . $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/add-product.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$name = $_POST['name'] ?? '';\r\n$price = $_POST['price'] ?? '';\r\n$category = $_POST['category'] ?? '';\r\n$description = $_POST['description'] ?? '';\r\n$image = '';\r\n\r\nif (isset($_FILES['image']) && $_FILES['image']['error'] === 0) {\r\n    $uploadDir = '../img/products/';\r\n    $imageName = time() . '_' . basename($_FILES['image']['name']);\r\n    $uploadPath = $uploadDir . $imageName;\r\n\r\n    if (move_uploaded_file($_FILES['image']['tmp_name'], $uploadPath)) {\r\n        $image = $imageName;\r\n    }\r\n}\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"INSERT INTO products (title, price, category, description, image) VALUES (?, ?, ?, ?, ?)\");\r\n    $stmt->execute([$name, $price, $category, $description, $image]);\r\n    echo json_encode(['success' => true]);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['success' => false, 'error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/add-to-cart.php",
        "content": "<?php\r\nsession_start();\r\nrequire_once 'connection.php';\r\n\r\nheader('Content-Type: application/json');\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    echo json_encode(['success' => false, 'message' => 'Не авторизован']);\r\n    exit;\r\n}\r\n\r\n$data = json_decode(file_get_contents('php://input'), true);\r\n$product_id = $data['product_id'] ?? 0;\r\n$user_id = $_SESSION['user']['id'];\r\n\r\ntry {\r\n    // Проверим — есть ли уже такой товар у пользователя\r\n    $stmt = $pdo->prepare(\"SELECT id, quantity FROM cart WHERE user_id = ? AND product_id = ?\");\r\n    $stmt->execute([$user_id, $product_id]);\r\n    $existing = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\r\n    if ($existing) {\r\n        // Увеличиваем количество\r\n        $stmt = $pdo->prepare(\"UPDATE cart SET quantity = quantity + 1 WHERE id = ?\");\r\n        $stmt->execute([$existing['id']]);\r\n    } else {\r\n        // Добавляем новую запись\r\n        $stmt = $pdo->prepare(\"INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, 1)\");\r\n        $stmt->execute([$user_id, $product_id]);\r\n    }\r\n\r\n    echo json_encode(['success' => true]);\r\n} catch (Exception $e) {\r\n    echo json_encode(['success' => false, 'message' => 'Ошибка добавления в корзину']);\r\n}\r\n"
    },
    {
        "path": "scripts/auth.php",
        "content": "<?php\r\nsession_start();\r\nrequire_once 'connection.php';\r\n\r\n$email = $_POST['email'] ?? '';\r\n$password = $_POST['password'] ?? '';\r\n\r\nif (!$email || !$password) {\r\n    echo \"Заполните все поля.\";\r\n    exit;\r\n}\r\n\r\n$stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = ?\");\r\n$stmt->execute([$email]);\r\n$user = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\r\nif ($user && password_verify($password, $user['password'])) {\r\n    $_SESSION['user'] = [\r\n        'id' => $user['id'],\r\n        'email' => $user['email'],\r\n        'name' => $user['name'],\r\n        'role' => $user['role']\r\n    ];\r\n    echo \"Успешный вход\";\r\n} else {\r\n    echo \"Неверный email или пароль.\";\r\n}\r\n"
    },
    {
        "path": "scripts/connection.php",
        "content": "<?php\r\n$host = 'localhost';\r\n$dbname = 'DemoShop';\r\n$username = 'root';\r\n$password = '';\r\n\r\ntry {\r\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname;charset=utf8\", $username, $password);\r\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n} catch (PDOException $e) {\r\n    die(\"Ошибка подключения к базе данных: \" . $e->getMessage());\r\n}\r\n"
    },
    {
        "path": "scripts/create-order.php",
        "content": "<?php\r\nsession_start();\r\nheader('Content-Type: application/json');\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    echo json_encode(['success' => false, 'message' => 'Неавторизованный пользователь']);\r\n    exit;\r\n}\r\n\r\n$userId = $_SESSION['user']['id'];\r\n\r\n$data = json_decode(file_get_contents('php://input'), true);\r\nif (empty($data['items']) || !is_array($data['items'])) {\r\n    echo json_encode(['success' => false, 'message' => 'Пустой список товаров']);\r\n    exit;\r\n}\r\n\r\nrequire_once 'connection.php';\r\n\r\n$items = $data['items'];\r\n\r\ntry {\r\n    $pdo->beginTransaction();\r\n\r\n    $stmt = $pdo->prepare(\"INSERT INTO orders (user_id, status) VALUES (?, 'поступил')\");\r\n    $stmt->execute([$userId]);\r\n    $orderId = $pdo->lastInsertId();\r\n\r\n    $stmtItem = $pdo->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\");\r\n\r\n    foreach ($items as $item) {\r\n        $stmtPrice = $pdo->prepare(\"SELECT price FROM products WHERE id = ?\");\r\n        $stmtPrice->execute([$item['product_id']]);\r\n        $price = $stmtPrice->fetchColumn();\r\n        if ($price === false) {\r\n            throw new Exception(\"Товар с ID {$item['product_id']} не найден\");\r\n        }\r\n        $quantity = max(1, (int)$item['quantity']);\r\n        $stmtItem->execute([$orderId, $item['product_id'], $quantity, $price]);\r\n    }\r\n\r\n    $pdo->commit();\r\n\r\n    $stmt = $pdo->prepare(\"DELETE FROM cart WHERE user_id = ?\");\r\n    $stmt->execute([$userId]);\r\n\r\n    echo json_encode(['success' => true, 'order_id' => $orderId]);\r\n\r\n\r\n    echo json_encode(['success' => true, 'order_id' => $orderId]);\r\n} catch (Exception $e) {\r\n    $pdo->rollBack();\r\n    echo json_encode(['success' => false, 'message' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/delete-blog-post.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$id = $_POST['id'] ?? null;\r\n\r\nif (!$id) {\r\n    echo json_encode(['success' => false, 'error' => 'ID поста не передан']);\r\n    exit;\r\n}\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"DELETE FROM blog_posts WHERE id = ?\");\r\n    $stmt->execute([$id]);\r\n    echo json_encode(['success' => true]);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['success' => false, 'error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/delete-comment.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$data = json_decode(file_get_contents(\"php://input\"), true);\r\n$comment_id = $data['comment_id'] ?? 0;\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"DELETE FROM product_comments WHERE id = ?\");\r\n    $stmt->execute([$comment_id]);\r\n\r\n    echo json_encode(['success' => true]);\r\n} catch (PDOException $e) {\r\n    http_response_code(500);\r\n    echo json_encode(['success' => false, 'error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/delete-product.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$id = $_POST['id'] ?? null;\r\n\r\nif (!$id) {\r\n    echo json_encode(['success' => false, 'error' => 'ID товара не передан']);\r\n    exit;\r\n}\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"DELETE FROM products WHERE id = ?\");\r\n    $stmt->execute([$id]);\r\n    echo json_encode(['success' => true]);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['success' => false, 'error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/delete-user.php",
        "content": "<?php\r\nrequire 'connection.php';\r\n\r\n$data = json_decode(file_get_contents(\"php://input\"), true);\r\n$id = $data['id'] ?? null;\r\n\r\nif (!$id) {\r\n    echo json_encode(['success' => false, 'error' => 'ID не передан']);\r\n    exit;\r\n}\r\n\r\n$stmt = $pdo->prepare(\"DELETE FROM users WHERE id = ?\");\r\n$stmt->execute([$id]);\r\n\r\necho json_encode(['success' => true]);\r\n"
    },
    {
        "path": "scripts/footer.php",
        "content": "<?php\r\n"
    },
    {
        "path": "scripts/get-blog-list.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\nheader('Content-Type: application/json');\r\n\r\ntry {\r\n    $stmt = $pdo->query(\"SELECT id, title, content, image, created_at FROM blog_posts ORDER BY created_at DESC\");\r\n    $posts = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n    echo json_encode($posts);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/get-blog-posts-admin.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\nheader('Content-Type: application/json');\r\n\r\ntry {\r\n    $stmt = $pdo->query(\"SELECT id, title, created_at FROM blog_posts ORDER BY created_at DESC\");\r\n    $posts = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n    echo json_encode($posts);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/get-blog-posts.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\nheader('Content-Type: application/json');\r\n\r\ntry {\r\n    $stmt = $pdo->query(\"SELECT id, title, content, image, created_at FROM blog_posts ORDER BY created_at DESC LIMIT 5\");\r\n    $posts = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n    echo json_encode($posts);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/get-cart-items.php",
        "content": "<?php\r\nsession_start();\r\nheader('Content-Type: application/json');\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    echo json_encode([]);\r\n    exit;\r\n}\r\n\r\nrequire_once 'connection.php';\r\n\r\n$userId = $_SESSION['user']['id'];\r\n\r\n$stmt = $pdo->prepare(\"\r\n    SELECT c.product_id, c.quantity, p.title, p.price, p.image \r\n    FROM cart c \r\n    JOIN products p ON c.product_id = p.id \r\n    WHERE c.user_id = ?\r\n\");\r\n$stmt->execute([$userId]);\r\n\r\n$items = [];\r\nwhile ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\r\n    $items[] = [\r\n        'product_id' => $row['product_id'],\r\n        'title' => $row['title'],\r\n        'price' => $row['price'],\r\n        'image' => $row['image'],\r\n        'quantity' => $row['quantity']\r\n    ];\r\n}\r\n\r\necho json_encode($items);\r\n"
    },
    {
        "path": "scripts/get-cart.php",
        "content": "<?php\r\nsession_start();\r\nheader('Content-Type: application/json');\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    http_response_code(401);\r\n    echo json_encode(['error' => 'Unauthorized']);\r\n    exit;\r\n}\r\n\r\n$userId = $_SESSION['user']['id'];\r\n\r\nrequire_once 'connection.php'; // Подключение к БД, настрой свой путь\r\n\r\n$sql = \"SELECT cart.id as cart_id, cart.quantity, p.id as product_id, p.title, p.price, p.image \r\n        FROM cart \r\n        JOIN products p ON cart.product_id = p.id \r\n        WHERE cart.user_id = ?\";\r\n\r\n$stmt = $pdo->prepare($sql);\r\n$stmt->execute([$userId]);\r\n$items = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n\r\necho json_encode($items);\r\n"
    },
    {
        "path": "scripts/get-catalog-products.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$title = $_GET['title'] ?? '';\r\n$category = $_GET['category'] ?? '';\r\n$minPrice = $_GET['min_price'] ?? '';\r\n$maxPrice = $_GET['max_price'] ?? '';\r\n\r\n$sql = \"SELECT * FROM products WHERE 1=1\";\r\n$params = [];\r\n\r\nif (!empty($title)) {\r\n    $sql .= \" AND title LIKE ?\";\r\n    $params[] = '%' . $title . '%';\r\n}\r\nif (!empty($category)) {\r\n    $sql .= \" AND category LIKE ?\";\r\n    $params[] = '%' . $category . '%';\r\n}\r\nif (!empty($minPrice)) {\r\n    $sql .= \" AND price >= ?\";\r\n    $params[] = $minPrice;\r\n}\r\nif (!empty($maxPrice)) {\r\n    $sql .= \" AND price <= ?\";\r\n    $params[] = $maxPrice;\r\n}\r\n\r\n$sql .= \" ORDER BY id DESC\";\r\n\r\n$stmt = $pdo->prepare($sql);\r\n$stmt->execute($params);\r\n\r\n$products = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n\r\nheader('Content-Type: application/json');\r\necho json_encode($products);\r\n"
    },
    {
        "path": "scripts/get-comments.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$product_id = $_GET['product_id'] ?? 0;\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"SELECT id, user_id, comment, created_at FROM product_comments WHERE product_id = ? ORDER BY created_at DESC\");\r\n    $stmt->execute([$product_id]);\r\n    $comments = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n\r\n    header('Content-Type: application/json');\r\n    echo json_encode($comments);\r\n} catch (PDOException $e) {\r\n    http_response_code(500);\r\n    echo json_encode(['error' => 'Ошибка при получении комментариев: ' . $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/get-favorites.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\nsession_start();\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    http_response_code(403);\r\n    echo json_encode([]);\r\n    exit;\r\n}\r\n\r\n$user_id = $_SESSION['user']['id'];\r\n\r\n$stmt = $pdo->prepare(\"\r\n    SELECT p.id, p.title, p.price, p.image\r\n    FROM favorites f\r\n    JOIN products p ON f.product_id = p.id\r\n    WHERE f.user_id = ?\r\n    ORDER BY f.created_at DESC\r\n\");\r\n$stmt->execute([$user_id]);\r\n$favorites = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n\r\nheader('Content-Type: application/json');\r\necho json_encode($favorites);\r\n"
    },
    {
        "path": "scripts/get-orders-admin.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\nheader('Content-Type: application/json');\r\n\r\ntry {\r\n    // Получаем список заказов\r\n    $stmt = $pdo->query(\"\r\n        SELECT o.id AS order_id, o.user_id, o.status, o.created_at,\r\n               oi.product_id, oi.quantity, oi.price,\r\n               p.title AS product_name\r\n        FROM orders o\r\n        JOIN order_items oi ON o.id = oi.order_id\r\n        JOIN products p ON oi.product_id = p.id\r\n        ORDER BY o.created_at DESC\r\n    \");\r\n\r\n    $orders = [];\r\n    foreach ($stmt->fetchAll(PDO::FETCH_ASSOC) as $row) {\r\n        $orderId = $row['order_id'];\r\n        if (!isset($orders[$orderId])) {\r\n            $orders[$orderId] = [\r\n                'id' => $orderId,\r\n                'user_id' => $row['user_id'],\r\n                'status' => $row['status'],\r\n                'created_at' => $row['created_at'],\r\n                'items' => []\r\n            ];\r\n        }\r\n        $orders[$orderId]['items'][] = [\r\n            'product_id' => $row['product_id'],\r\n            'product_name' => $row['product_name'],\r\n            'quantity' => $row['quantity'],\r\n            'price' => $row['price']\r\n        ];\r\n    }\r\n\r\n    echo json_encode(['success' => true, 'orders' => array_values($orders)]);\r\n} catch (Exception $e) {\r\n    echo json_encode(['success' => false, 'message' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/get-orders.php",
        "content": "<?php\r\nsession_start();\r\nheader('Content-Type: application/json');\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    echo json_encode([]);\r\n    exit;\r\n}\r\n\r\nrequire_once 'connection.php';\r\n\r\n$userId = $_SESSION['user']['id'];\r\n\r\n$stmt = $pdo->prepare(\"SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC\");\r\n$stmt->execute([$userId]);\r\n$orders = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n\r\nforeach ($orders as &$order) {\r\n    $stmtItems = $pdo->prepare(\"\r\n        SELECT oi.quantity, oi.price, p.title, p.image \r\n        FROM order_items oi \r\n        LEFT JOIN products p ON oi.product_id = p.id \r\n        WHERE oi.order_id = ?\r\n    \");\r\n    $stmtItems->execute([$order['id']]);\r\n    $order['items'] = $stmtItems->fetchAll(PDO::FETCH_ASSOC);\r\n}\r\n\r\necho json_encode($orders);\r\n"
    },
    {
        "path": "scripts/get-product.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$product_id = $_GET['id'] ?? 0;\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"SELECT id, title, description, price, image, category FROM products WHERE id = ?\");\r\n    $stmt->execute([$product_id]);\r\n    $product = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\r\n    header('Content-Type: application/json');\r\n    if ($product) {\r\n        echo json_encode($product);\r\n    } else {\r\n        echo json_encode(['error' => 'Товар не найден']);\r\n    }\r\n} catch (PDOException $e) {\r\n    http_response_code(500);\r\n    echo json_encode(['error' => 'Ошибка получения товара: ' . $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/get-products.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\nheader('Content-Type: application/json');\r\n\r\ntry {\r\n    $stmt = $pdo->query(\"SELECT id, title, price, category, description, image FROM products ORDER BY id DESC\");\r\n    $products = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n    echo json_encode($products);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/get-users.php",
        "content": "<?php\r\nrequire 'connection.php';\r\n\r\n$stmt = $pdo->query(\"SELECT id, name, email, role, created_at FROM users ORDER BY created_at DESC\");\r\n$users = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n\r\nheader('Content-Type: application/json');\r\necho json_encode($users);\r\n"
    },
    {
        "path": "scripts/header.php",
        "content": "<?php\r\nsession_start();\r\n$isAdminPanel = basename($_SERVER['PHP_SELF']) === 'admin-panel.php';\r\n$isAuthorized = $_SESSION['user'] ?? false;\r\n$isAdmin = ($_SESSION['user']['role'] ?? null) === 'admin' ;\r\n?>\r\n\r\n<header class=\"site-header\">\r\n    <div class=\"container\">\r\n        <div class=\"logo\">\r\n            <a href=\"#\">MyShop</a>\r\n        </div>\r\n\r\n        <nav class=\"main-nav\" id=\"main-nav\">\r\n            <ul>\r\n                <?php if ($isAdminPanel): ?>\r\n                    <li><a href=\"#\" data-route=\"admin-products\">Товары</a></li>\r\n                    <li><a href=\"#\" data-route=\"admin-orders\">Заказы</a></li>\r\n                    <li><a href=\"#\" data-route=\"blog-section\">Блог</a></li>\r\n                    <li><a href=\"#\" data-route=\"users-section\">Пользователи</a></li>\r\n                    <li><a href=\"/index.php\">Выйти</a></li>\r\n                <?php else: ?>\r\n                    <?php if ($isAuthorized): ?>\r\n                        <li><a href=\"#\" data-route=\"home\">Главная</a></li>\r\n                        <li><a href=\"#\" data-route=\"product-catalog\">Каталог</a></li>\r\n                        <li><a href=\"#\" data-route=\"account\">Личный кабинет</a></li>\r\n                        <li><a href=\"#\" data-route=\"blog\">Блог</a></li>\r\n                        <?php if ($isAdmin): ?>\r\n                            <li><a href=\"/admin-panel.php\">Админка</a></li>\r\n                        <?php endif; ?>\r\n                    <?php else: ?>\r\n                        <li><a href=\"#\" data-route=\"home\">Главная</a></li>\r\n                        <li><a href=\"#\" data-route=\"blog\">Блог</a></li>\r\n                        <li><a href=\"#\" data-route=\"login-section\">Авторизация</a></li>\r\n                        <li><a href=\"#\" data-route=\"register-section\">Регистрация</a></li>\r\n                    <?php endif; ?>\r\n                <?php endif; ?>\r\n            </ul>\r\n        </nav>\r\n\r\n        <div class=\"burger\" id=\"burger\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n        </div>\r\n    </div>\r\n</header>\r\n"
    },
    {
        "path": "scripts/is-favorite.php",
        "content": "<?php\r\nsession_start();\r\nrequire_once 'connection.php';\r\n\r\nheader('Content-Type: application/json');\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    echo json_encode(['favorited' => false]);\r\n    exit;\r\n}\r\n\r\n$product_id = $_GET['product_id'] ?? 0;\r\n$user_id = $_SESSION['user']['id'];\r\n\r\n$stmt = $pdo->prepare(\"SELECT 1 FROM favorites WHERE user_id = ? AND product_id = ?\");\r\n$stmt->execute([$user_id, $product_id]);\r\n$isFavorite = $stmt->fetchColumn();\r\n\r\necho json_encode(['favorited' => (bool)$isFavorite]);\r\n"
    },
    {
        "path": "scripts/logout.php",
        "content": "<?php\r\nsession_start();\r\nsession_destroy();\r\nheader('Location: ../index.php');\r\nexit;\r\n"
    },
    {
        "path": "scripts/register.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$name = trim($_POST['name'] ?? '');\r\n$email = trim($_POST['email'] ?? '');\r\n$password = $_POST['password'] ?? '';\r\n\r\nif (!$name || !$email || !$password) {\r\n    echo \"Заполните все поля.\";\r\n    exit;\r\n}\r\n\r\n$stmt = $pdo->prepare(\"SELECT COUNT(*) FROM users WHERE email = ?\");\r\n$stmt->execute([$email]);\r\nif ($stmt->fetchColumn() > 0) {\r\n    echo \"Пользователь с таким email уже существует.\";\r\n    exit;\r\n}\r\n\r\n$hashedPassword = password_hash($password, PASSWORD_DEFAULT);\r\n$insert = $pdo->prepare(\"INSERT INTO users (name, email, password) VALUES (?, ?, ?)\");\r\n$insert->execute([$name, $email, $hashedPassword]);\r\n\r\necho \"Регистрация прошла успешно.\";\r\n"
    },
    {
        "path": "scripts/remove-from-cart.php",
        "content": "<?php\r\nsession_start();\r\nheader('Content-Type: application/json');\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    http_response_code(401);\r\n    echo json_encode(['success' => false, 'message' => 'Unauthorized']);\r\n    exit;\r\n}\r\n\r\n$data = json_decode(file_get_contents('php://input'), true);\r\nif (empty($data['cart_id'])) {\r\n    echo json_encode(['success' => false, 'message' => 'Неверные данные']);\r\n    exit;\r\n}\r\n\r\nrequire_once 'connection.php';\r\n\r\n$sql = \"DELETE FROM cart WHERE id = ? AND user_id = ?\";\r\n$stmt = $pdo->prepare($sql);\r\n$success = $stmt->execute([$data['cart_id'], $_SESSION['user']['id']]);\r\n\r\necho json_encode(['success' => $success]);\r\n"
    },
    {
        "path": "scripts/toggle-favorite.php",
        "content": "<?php\r\nsession_start();\r\nrequire_once 'connection.php';\r\n\r\nheader('Content-Type: application/json');\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    echo json_encode(['success' => false, 'message' => 'Не авторизован']);\r\n    exit;\r\n}\r\n\r\n$data = json_decode(file_get_contents('php://input'), true);\r\n$product_id = $data['product_id'] ?? 0;\r\n$user_id = $_SESSION['user']['id'];\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"SELECT id FROM favorites WHERE user_id = ? AND product_id = ?\");\r\n    $stmt->execute([$user_id, $product_id]);\r\n    $existing = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\r\n    if ($existing) {\r\n        $pdo->prepare(\"DELETE FROM favorites WHERE id = ?\")->execute([$existing['id']]);\r\n        echo json_encode(['success' => true, 'favorited' => false]);\r\n    } else {\r\n        $pdo->prepare(\"INSERT INTO favorites (user_id, product_id) VALUES (?, ?)\")->execute([$user_id, $product_id]);\r\n        echo json_encode(['success' => true, 'favorited' => true]);\r\n    }\r\n} catch (Exception $e) {\r\n    echo json_encode(['success' => false, 'message' => 'Ошибка переключения избранного']);\r\n}\r\n"
    },
    {
        "path": "scripts/update-blog-post.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$id = $_POST['id'] ?? null;\r\n$title = $_POST['title'] ?? '';\r\n$content = $_POST['content'] ?? '';\r\n$image = null;\r\n\r\nif (!$id) {\r\n    echo json_encode(['success' => false, 'error' => 'ID поста не передан']);\r\n    exit;\r\n}\r\n\r\nif (isset($_FILES['image']) && $_FILES['image']['error'] === 0) {\r\n    $uploadDir = '../img/blog/';\r\n    if (!is_dir($uploadDir)) mkdir($uploadDir, 0777, true);\r\n\r\n    $imageName = time() . '_' . basename($_FILES['image']['name']);\r\n    $uploadPath = $uploadDir . $imageName;\r\n\r\n    if (move_uploaded_file($_FILES['image']['tmp_name'], $uploadPath)) {\r\n        $image = $imageName;\r\n    }\r\n}\r\n\r\ntry {\r\n    if ($image) {\r\n        $stmt = $pdo->prepare(\"UPDATE blog_posts SET title = ?, content = ?, image = ? WHERE id = ?\");\r\n        $stmt->execute([$title, $content, $image, $id]);\r\n    } else {\r\n        $stmt = $pdo->prepare(\"UPDATE blog_posts SET title = ?, content = ? WHERE id = ?\");\r\n        $stmt->execute([$title, $content, $id]);\r\n    }\r\n\r\n    echo json_encode(['success' => true]);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['success' => false, 'error' => $e->getMessage()]);\r\n}\r\n\r\n"
    },
    {
        "path": "scripts/update-cart.php",
        "content": "<?php\r\nsession_start();\r\nheader('Content-Type: application/json');\r\n\r\nif (!isset($_SESSION['user'])) {\r\n    http_response_code(401);\r\n    echo json_encode(['success' => false, 'message' => 'Unauthorized']);\r\n    exit;\r\n}\r\n\r\n$data = json_decode(file_get_contents('php://input'), true);\r\nif (empty($data['cart_id']) || empty($data['quantity']) || $data['quantity'] < 1) {\r\n    echo json_encode(['success' => false, 'message' => 'Неверные данные']);\r\n    exit;\r\n}\r\n\r\nrequire_once 'connection.php';\r\n\r\n$sql = \"UPDATE cart SET quantity = ? WHERE id = ? AND user_id = ?\";\r\n$stmt = $pdo->prepare($sql);\r\n$success = $stmt->execute([$data['quantity'], $data['cart_id'], $_SESSION['user']['id']]);\r\n\r\necho json_encode(['success' => $success]);\r\n"
    },
    {
        "path": "scripts/update-order-status.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\nheader('Content-Type: application/json');\r\n\r\n$data = json_decode(file_get_contents('php://input'), true);\r\n$orderId = $data['order_id'] ?? null;\r\n$newStatus = $data['status'] ?? null;\r\n\r\n$validStatuses = ['поступил', 'в обработке', 'в сборке', 'отправлен', 'выдан', 'отменён'];\r\n\r\nif (!$orderId || !in_array($newStatus, $validStatuses, true)) {\r\n    echo json_encode(['success' => false, 'message' => 'Неверные данные']);\r\n    exit;\r\n}\r\n\r\ntry {\r\n    $stmt = $pdo->prepare(\"UPDATE orders SET status = ? WHERE id = ?\");\r\n    $stmt->execute([$newStatus, $orderId]);\r\n    echo json_encode(['success' => true]);\r\n} catch (Exception $e) {\r\n    echo json_encode(['success' => false, 'message' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/update-product.php",
        "content": "<?php\r\nrequire_once 'connection.php';\r\n\r\n$id = $_POST['id'] ?? null;\r\n$name = $_POST['name'] ?? '';\r\n$price = $_POST['price'] ?? '';\r\n$category = $_POST['category'] ?? '';\r\n$description = $_POST['description'] ?? '';\r\n$image = null;\r\n\r\nif (!$id) {\r\n    echo json_encode(['success' => false, 'error' => 'ID товара не передан']);\r\n    exit;\r\n}\r\n\r\nif (isset($_FILES['image']) && $_FILES['image']['error'] === 0) {\r\n    $uploadDir = '../img/products/';\r\n    $imageName = time() . '_' . basename($_FILES['image']['name']);\r\n    $uploadPath = $uploadDir . $imageName;\r\n\r\n    if (move_uploaded_file($_FILES['image']['tmp_name'], $uploadPath)) {\r\n        $image = $imageName;\r\n    }\r\n}\r\n\r\ntry {\r\n    if ($image) {\r\n        $stmt = $pdo->prepare(\"UPDATE products SET title = ?, price = ?, category = ?, description = ?, image = ? WHERE id = ?\");\r\n        $stmt->execute([$name, $price, $category, $description, $image, $id]);\r\n    } else {\r\n        $stmt = $pdo->prepare(\"UPDATE products SET title = ?, price = ?, category = ?, description = ? WHERE id = ?\");\r\n        $stmt->execute([$name, $price, $category, $description, $id]);\r\n    }\r\n\r\n    echo json_encode(['success' => true]);\r\n} catch (PDOException $e) {\r\n    echo json_encode(['success' => false, 'error' => $e->getMessage()]);\r\n}\r\n"
    },
    {
        "path": "scripts/update-user-role.php",
        "content": "<?php\r\nrequire 'connection.php';\r\n\r\n$data = json_decode(file_get_contents(\"php://input\"), true);\r\n$id = $data['id'] ?? null;\r\n$role = $data['role'] ?? '';\r\n\r\nif (!$id || !in_array($role, ['user', 'admin'])) {\r\n    echo json_encode(['success' => false, 'error' => 'Неверные данные']);\r\n    exit;\r\n}\r\n\r\n$stmt = $pdo->prepare(\"UPDATE users SET role = ? WHERE id = ?\");\r\n$stmt->execute([$role, $id]);\r\n\r\necho json_encode(['success' => true]);\r\n"
    },
    {
        "path": "styles/admin.css",
        "content": ".admin-section {\r\n    padding: 40px 20px;\r\n}\r\n\r\n.admin-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n.product-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n}\r\n\r\n.product-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    background-color: var(--color-white);\r\n    border: 1px solid var(--color-light);\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n}\r\n\r\n.product-info p {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-actions {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n}\r\n\r\n.btn {\r\n    padding: 8px 14px;\r\n    border: none;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    background-color: var(--color-light);\r\n    transition: background-color 0.2s ease;\r\n}\r\n\r\n.btn.primary {\r\n    background-color: var(--color-accent);\r\n    color: white;\r\n}\r\n\r\n.btn.danger {\r\n    background-color: #d35c5c;\r\n    color: white;\r\n}\r\n\r\n.btn.edit {\r\n    background-color: #7e9db4;\r\n    color: white;\r\n}\r\n\r\n.btn.comments {\r\n    background-color: #b0a1ca;\r\n    color: white;\r\n}\r\n\r\n/* Форма */\r\n.modal {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(30, 30, 30, 0.6);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 999;\r\n}\r\n\r\n.modal form {\r\n    background-color: white;\r\n    padding: 30px;\r\n    border-radius: 10px;\r\n    width: 100%;\r\n    max-width: 500px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n.form-actions {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 10px;\r\n}\r\n\r\n.hidden {\r\n    display: none;\r\n}\r\n\r\n.order-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n}\r\n\r\n.order-card {\r\n    background: #fff;\r\n    border-radius: 12px;\r\n    padding: 1rem;\r\n    box-shadow: 0 2px 10px rgba(0,0,0,0.05);\r\n}\r\n\r\n.order-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: .5rem;\r\n}\r\n\r\n.order-status {\r\n    padding: 4px 8px;\r\n    border-radius: 8px;\r\n    background-color: #f1f1f1;\r\n    font-size: 0.85rem;\r\n}\r\n\r\n.order-meta {\r\n    font-size: 0.9rem;\r\n    color: #555;\r\n    margin-bottom: .5rem;\r\n}\r\n\r\n.order-items {\r\n    border-top: 1px solid #ddd;\r\n    padding-top: .5rem;\r\n}\r\n\r\n.order-item {\r\n    margin: .25rem 0;\r\n}\r\n\r\n.order-status-select {\r\n    padding: 4px 8px;\r\n    border-radius: 8px;\r\n    border: 1px solid #ccc;\r\n    background: #f9f9f9;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.user-item {\r\n    border: 1px solid #ccc;\r\n    padding: 1em;\r\n    margin: 1em 0;\r\n    border-radius: 0.5em;\r\n    background: #f9f9f9;\r\n}\r\n"
    },
    {
        "path": "styles/main.css",
        "content": "#home {\r\n    padding: 60px 20px;\r\n    background-color: var(--color-bg);\r\n    color: var(--color-text);\r\n    text-align: center;\r\n}\r\n\r\n.main-title {\r\n    font-size: 2.2rem;\r\n    margin-bottom: 40px;\r\n    color: var(--color-accent);\r\n}\r\n\r\n.info-blocks {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n    gap: 20px;\r\n}\r\n\r\n.info-card {\r\n    background-color: var(--color-white);\r\n    border: 1px solid var(--color-light);\r\n    border-radius: 12px;\r\n    padding: 30px 20px;\r\n    box-shadow: 0 5px 15px rgba(0,0,0,0.05);\r\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.info-card:hover {\r\n    transform: translateY(-5px);\r\n    box-shadow: 0 10px 25px rgba(0,0,0,0.08);\r\n}\r\n\r\n.info-card h2 {\r\n    color: var(--color-dark);\r\n    margin-bottom: 15px;\r\n    font-size: 1.4rem;\r\n}\r\n\r\n.info-card p {\r\n    font-size: 1rem;\r\n    color: var(--color-text);\r\n}\r\n\r\n.info-card {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n    animation: fadeUp 0.6s forwards;\r\n}\r\n\r\n.info-card:nth-child(2) { animation-delay: 0.2s; }\r\n.info-card:nth-child(3) { animation-delay: 0.4s; }\r\n\r\n@keyframes fadeUp {\r\n    to {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n    }\r\n}\r\n\r\n.page-section {\r\n    padding: 2rem;\r\n    animation: fadeIn 0.5s ease-in-out;\r\n}\r\n\r\n.filters {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 10px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.filters input {\r\n    flex: 1 1 200px;\r\n    padding: 8px;\r\n    border-radius: 8px;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.product-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\r\n    gap: 1.5rem;\r\n}\r\n\r\n.no-products {\r\n    text-align: center;\r\n    font-size: 1.2rem;\r\n    color: #777;\r\n    margin-top: 20px;\r\n}\r\n\r\n.loading {\r\n    opacity: 0.5;\r\n}\r\n\r\n.product-card {\r\n    background: white;\r\n    max-width: 400px;\r\n    border-radius: 12px;\r\n    padding: 1rem;\r\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n    text-align: center;\r\n    transition: transform 0.3s ease;\r\n}\r\n\r\n.product-card:hover {\r\n    transform: scale(1.03);\r\n}\r\n\r\n.product-card img {\r\n    max-width: 100%;\r\n    border-radius: 8px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.modal {\r\n    position: fixed;\r\n    top: 0; left: 0; right: 0; bottom: 0;\r\n    background: rgba(0,0,0,0.5);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    z-index: 1000;\r\n    opacity: 1;\r\n    transition: opacity 0.3s ease;\r\n}\r\n\r\n.modal.hidden {\r\n    opacity: 0;\r\n    pointer-events: none;\r\n}\r\n\r\n.modal-content {\r\n    background: #fff;\r\n    border-radius: 8px;\r\n    max-width: 700px;\r\n    width: 90%;\r\n    max-height: 90vh;\r\n    overflow-y: auto;\r\n    padding: 20px;\r\n    position: relative;\r\n}\r\n\r\n.modal-close {\r\n    position: absolute;\r\n    top: 15px; right: 20px;\r\n    font-size: 2rem;\r\n    border: none;\r\n    background: none;\r\n    cursor: pointer;\r\n}\r\n\r\n.product-details {\r\n    display: flex;\r\n    gap: 20px;\r\n}\r\n\r\n.modal-product-image {\r\n    max-width: 250px;\r\n    border-radius: 6px;\r\n    object-fit: contain;\r\n}\r\n\r\n.modal-product-info {\r\n    flex: 1;\r\n}\r\n\r\n.modal-actions {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    gap: 10px;\r\n}\r\n\r\n.comments-section {\r\n    margin-top: 30px;\r\n}\r\n\r\n.comments-container {\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n    border: 1px solid #ddd;\r\n    padding: 10px;\r\n    border-radius: 6px;\r\n    background: #fafafa;\r\n}\r\n\r\n.comment {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.add-comment-form textarea {\r\n    width: 100%;\r\n    resize: vertical;\r\n    margin-bottom: 10px;\r\n    padding: 8px;\r\n    border-radius: 4px;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.favorites-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));\r\n    gap: 16px;\r\n    margin-top: 16px;\r\n}\r\n\r\n.favorite-card {\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    border-radius: 8px;\r\n    background: #fff;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    transition: box-shadow 0.3s;\r\n}\r\n\r\n.favorite-card:hover {\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.favorite-card img {\r\n    max-width: 100%;\r\n    height: 120px;\r\n    object-fit: contain;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.favorite-card h4 {\r\n    font-size: 16px;\r\n    margin-bottom: 4px;\r\n    text-align: center;\r\n}\r\n\r\n.favorite-card .price {\r\n    font-weight: bold;\r\n    margin-bottom: 8px;\r\n}\r\n\r\n.favorite-card .btn {\r\n    font-size: 14px;\r\n    padding: 6px 10px;\r\n}\r\n\r\n#cart-section {\r\n    margin-top: 40px;\r\n}\r\n\r\n#cart-section h3 {\r\n    font-size: 1.6rem;\r\n    margin-bottom: 20px;\r\n    border-bottom: 2px solid #333;\r\n    padding-bottom: 6px;\r\n}\r\n\r\n#cart-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n    padding-right: 10px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 6px;\r\n    background-color: #fafafa;\r\n}\r\n\r\n#no-cart-items {\r\n    font-style: italic;\r\n    color: #888;\r\n    margin-bottom: 15px;\r\n    text-align: center;\r\n}\r\n\r\n.cart-item {\r\n    display: flex;\r\n    gap: 15px;\r\n    padding: 10px;\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    box-shadow: 0 1px 3px rgb(0 0 0 / 0.1);\r\n    align-items: center;\r\n}\r\n\r\n.cart-item-img {\r\n    width: 80px;\r\n    height: 80px;\r\n    object-fit: contain;\r\n    border-radius: 4px;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.cart-item-info {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n}\r\n\r\n.cart-item-info h4 {\r\n    margin: 0;\r\n    font-size: 1.1rem;\r\n    font-weight: 600;\r\n    color: #222;\r\n}\r\n\r\n.cart-item-info p {\r\n    margin: 0;\r\n    font-size: 1rem;\r\n    color: #555;\r\n}\r\n\r\n.cart-quantity-control {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 6px;\r\n}\r\n\r\n.qty-btn {\r\n    width: 28px;\r\n    height: 28px;\r\n    border: 1px solid #aaa;\r\n    background: #eee;\r\n    cursor: pointer;\r\n    font-size: 18px;\r\n    line-height: 1;\r\n    color: #333;\r\n    border-radius: 4px;\r\n    user-select: none;\r\n    transition: background-color 0.2s;\r\n}\r\n\r\n.qty-btn:hover {\r\n    background-color: #ddd;\r\n}\r\n\r\n.qty-input {\r\n    width: 50px;\r\n    padding: 4px 6px;\r\n    font-size: 1rem;\r\n    text-align: center;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n}\r\n\r\n.remove-cart-btn {\r\n    align-self: flex-start;\r\n    padding: 6px 12px;\r\n    font-size: 0.9rem;\r\n    color: #fff;\r\n    background-color: #d9534f;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n}\r\n\r\n.remove-cart-btn:hover {\r\n    background-color: #c9302c;\r\n}\r\n\r\n#checkout-btn {\r\n    margin-top: 15px;\r\n    padding: 12px 20px;\r\n    font-size: 1.1rem;\r\n    background-color: #28a745;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n    width: 100%;\r\n    max-width: 300px;\r\n    display: block;\r\n}\r\n\r\n#checkout-btn:disabled {\r\n    background-color: #94d3a2;\r\n    cursor: not-allowed;\r\n}\r\n\r\n#checkout-btn:hover:not(:disabled) {\r\n    background-color: #218838;\r\n}\r\n\r\n.order-card {\r\n    border: 1px solid #ccc;\r\n    border-radius: 6px;\r\n    margin-bottom: 15px;\r\n    padding: 15px;\r\n    background: #fff;\r\n}\r\n\r\n.order-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 12px;\r\n    font-weight: 600;\r\n    font-size: 1rem;\r\n    color: #333;\r\n}\r\n\r\n.order-items {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 15px;\r\n}\r\n\r\n.order-item {\r\n    display: flex;\r\n    gap: 10px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 6px;\r\n    padding: 10px;\r\n    background: #fafafa;\r\n    width: 100%;\r\n    max-width: 300px;\r\n}\r\n\r\n.order-item-img {\r\n    width: 70px;\r\n    height: 70px;\r\n    object-fit: contain;\r\n    border-radius: 4px;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.order-item-info h4 {\r\n    margin: 0 0 5px 0;\r\n    font-size: 1rem;\r\n}\r\n\r\n.order-item-info p {\r\n    margin: 2px 0;\r\n    font-size: 0.9rem;\r\n    color: #555;\r\n}\r\n\r\n.blog-slider-container {\r\n    position: relative;\r\n    overflow: hidden;\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.blog-slider {\r\n    display: flex;\r\n    transition: transform 0.6s ease;\r\n}\r\n\r\n.blog-slide {\r\n    min-width: 100%;\r\n    height: fit-content;\r\n    max-height: 450px;\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    cursor: pointer;\r\n}\r\n\r\n.blog-slide img {\r\n    width: 100%;\r\n    display: block;\r\n}\r\n\r\n.blog-slide-title {\r\n    position: absolute;\r\n    bottom: 0;\r\n    background: rgba(0, 0, 0, 0.6);\r\n    color: #fff;\r\n    width: 100%;\r\n    padding: 10px;\r\n    font-size: 1.2em;\r\n}\r\n\r\n.blog-prev, .blog-next {\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    background: rgba(0,0,0,0.5);\r\n    color: white;\r\n    border: none;\r\n    padding: 12px;\r\n    cursor: pointer;\r\n    font-size: 20px;\r\n    z-index: 2;\r\n}\r\n\r\n.blog-prev {\r\n    left: 10px;\r\n}\r\n.blog-next {\r\n    right: 10px;\r\n}\r\n\r\n.blog-dots {\r\n    text-align: center;\r\n    margin-top: 10px;\r\n}\r\n.blog-dot {\r\n    display: inline-block;\r\n    width: 10px;\r\n    height: 10px;\r\n    margin: 0 4px;\r\n    background: #ccc;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n}\r\n.blog-dot.active {\r\n    background: #555;\r\n}\r\n\r\n.blog-modal {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0,0,0,0.7);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 1000;\r\n}\r\n\r\n.blog-modal.hidden {\r\n    display: none;\r\n}\r\n\r\n.blog-modal-content {\r\n    background: white;\r\n    padding: 20px;\r\n    max-width: 600px;\r\n    width: 95%;\r\n    max-height: 90vh;\r\n    overflow-y: auto;\r\n    position: relative;\r\n}\r\n\r\n.blog-modal-close {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 15px;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n}\r\n\r\n.blog-list {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 20px;\r\n    margin: 40px auto;\r\n    max-width: 1000px;\r\n    justify-content: center;\r\n}\r\n\r\n.blog-card {\r\n    width: 300px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n    background: white;\r\n    box-shadow: 0 2px 6px rgba(0,0,0,0.1);\r\n    transition: transform 0.3s;\r\n    cursor: pointer;\r\n}\r\n\r\n.blog-card:hover {\r\n    transform: translateY(-5px);\r\n}\r\n\r\n.blog-card img {\r\n    width: 100%;\r\n    height: 180px;\r\n    object-fit: cover;\r\n}\r\n\r\n.blog-card-content {\r\n    padding: 15px;\r\n}\r\n\r\n.blog-card-title {\r\n    font-size: 1.2em;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.blog-card-excerpt {\r\n    font-size: 0.95em;\r\n    color: #555;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.blog-card-date {\r\n    font-size: 0.8em;\r\n    color: #999;\r\n}\r\n#blog-modal {\r\n    display: none;\r\n    position: fixed;\r\n    z-index: 9999;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow-y: auto;\r\n    background-color: rgba(0, 0, 0, 0.6);\r\n}\r\n\r\n#blog-modal-content {\r\n    background-color: #fff;\r\n    margin: 60px auto;\r\n    padding: 30px;\r\n    border-radius: 10px;\r\n    max-width: 800px;\r\n    width: 90%;\r\n    position: relative;\r\n    animation: fadeInUp 0.3s ease-out;\r\n}\r\n\r\n#blog-modal-title {\r\n    font-size: 1.8em;\r\n    margin-bottom: 20px;\r\n    color: #333;\r\n}\r\n\r\n#blog-modal-image {\r\n    width: 100%;\r\n    height: auto;\r\n    max-height: 400px;\r\n    object-fit: cover;\r\n    border-radius: 8px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n#blog-modal-text {\r\n    font-size: 1.05em;\r\n    line-height: 1.6em;\r\n    color: #444;\r\n    margin-bottom: 20px;\r\n    white-space: pre-wrap;\r\n}\r\n\r\n#blog-modal-date {\r\n    font-size: 0.85em;\r\n    color: #888;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n    from {\r\n        opacity: 0;\r\n        transform: translateY(40px);\r\n    }\r\n    to {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n    }\r\n}\r\n\r\n#blog-modal-close:hover {\r\n    color: #000;\r\n}\r\n\r\n@media (max-width: 600px) {\r\n    #blog-modal-content {\r\n        padding: 20px;\r\n    }\r\n\r\n    #blog-modal-title {\r\n        font-size: 1.4em;\r\n    }\r\n\r\n    #blog-modal-text {\r\n        font-size: 0.95em;\r\n    }\r\n\r\n    .cart-item {\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n    }\r\n\r\n    .cart-item-img {\r\n        width: 100%;\r\n        height: auto;\r\n    }\r\n\r\n    .cart-item-info {\r\n        width: 100%;\r\n    }\r\n\r\n    .cart-quantity-control {\r\n        justify-content: flex-start;\r\n    }\r\n\r\n    #checkout-btn {\r\n        max-width: 100%;\r\n    }\r\n}\r\n"
    },
    {
        "path": "styles/style.css",
        "content": ":root {\r\n    --color-primary: #A8DADC;\r\n    --color-primary-dark: #78B5B7;\r\n    --color-secondary: #FFB4A2;\r\n    --color-accent: #FCD5CE;\r\n    --color-bg: #FFF9F4;\r\n    --color-text: #333333;\r\n    --color-muted: #888888;\r\n    --color-border: #E6E6E6;\r\n    --color-success: #B5EAD7;\r\n    --color-error: #FFAAA5;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    font-family: 'Inter', Inter, sans-serif;\r\n    background-color: var(--color-bg);\r\n    color: var(--color-text);\r\n    line-height: 1.6;\r\n    font-size: 16px;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n    color: var(--color-text);\r\n    font-weight: 600;\r\n}\r\n\r\na {\r\n    color: var(--color-primary);\r\n    text-decoration: none;\r\n    transition: 0.3s ease;\r\n}\r\na:hover {\r\n    color: var(--color-primary-dark);\r\n}\r\n\r\n.page-section {\r\n    display: none;\r\n    opacity: 0;\r\n    transition: opacity 0.3s ease;\r\n}\r\n.page-section.active {\r\n    display: block;\r\n    opacity: 1;\r\n}\r\n\r\n.button {\r\n    display: inline-block;\r\n    padding: 10px 20px;\r\n    border-radius: 8px;\r\n    background-color: var(--color-primary);\r\n    color: #fff;\r\n    font-weight: 500;\r\n    border: none;\r\n    cursor: pointer;\r\n    transition: background 0.3s ease;\r\n}\r\n.button:hover {\r\n    background-color: var(--color-primary-dark);\r\n}\r\n\r\n.button-secondary {\r\n    background-color: var(--color-secondary);\r\n    color: #fff;\r\n}\r\n.button-secondary:hover {\r\n    opacity: 0.9;\r\n}\r\n\r\n.card {\r\n    background-color: #fff;\r\n    border: 1px solid var(--color-border);\r\n    border-radius: 12px;\r\n    padding: 16px;\r\n    box-shadow: 0 2px 8px rgba(0,0,0,0.05);\r\n}\r\n\r\ninput, textarea, select {\r\n    width: 100%;\r\n    padding: 10px;\r\n    border: 1px solid var(--color-border);\r\n    border-radius: 6px;\r\n    background-color: #fff;\r\n    margin-bottom: 15px;\r\n    font-size: 1rem;\r\n    transition: border-color 0.2s ease;\r\n}\r\ninput:focus, textarea:focus, select:focus {\r\n    outline: none;\r\n    border-color: var(--color-primary);\r\n}\r\n\r\n.text-center { text-align: center; }\r\n.mt-1 { margin-top: 8px; }\r\n.mt-2 { margin-top: 16px; }\r\n.mt-3 { margin-top: 24px; }\r\n.p-1 { padding: 8px; }\r\n.p-2 { padding: 16px; }\r\n\r\n.hidden { display: none; }\r\n\r\n.site-header {\r\n    background: var(--color-bg);\r\n    border-bottom: 1px solid var(--color-border);\r\n    padding: 12px 0;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 10;\r\n}\r\n\r\n.container-info {\r\n    max-width: 1280px;\r\n    margin: auto;\r\n    padding: 0 16px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.container {\r\n    max-width: 1280px;\r\n    margin: auto;\r\n    padding: 0 16px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.logo a {\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n    color: var(--color-primary);\r\n}\r\n\r\n.main-nav ul {\r\n    list-style: none;\r\n    display: flex;\r\n    gap: 20px;\r\n}\r\n\r\n.main-nav ul li a {\r\n    font-weight: 500;\r\n    color: var(--color-text);\r\n    transition: 0.3s;\r\n}\r\n.main-nav ul li a:hover {\r\n    color: var(--color-primary);\r\n}\r\n\r\n.burger {\r\n    display: none;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    cursor: pointer;\r\n}\r\n.burger span {\r\n    width: 25px;\r\n    height: 3px;\r\n    background: var(--color-text);\r\n    border-radius: 2px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .main-nav {\r\n        display: none;\r\n        position: absolute;\r\n        top: 64px;\r\n        right: 0;\r\n        background: var(--color-bg);\r\n        width: 200px;\r\n        padding: 20px;\r\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n        transform: translateX(100%);\r\n        transition: transform 0.5s ease;\r\n        z-index: 100;\r\n    }\r\n\r\n    .main-nav.active {\r\n        transform: translateX(0);\r\n        display: block;\r\n    }\r\n\r\n    .main-nav ul {\r\n        flex-direction: column;\r\n        gap: 10px;\r\n    }\r\n\r\n    .burger {\r\n        display: flex;\r\n    }\r\n\r\n    .container-info{\r\n        flex-direction: column;\r\n    }\r\n}\r\n"
    }
];

files.forEach(({ path: relPath, content }) => {
    const fullPath = path.join(ROOT, relPath);
    mkdirp(path.dirname(fullPath));
    createFile(fullPath, content);
});

console.log('✅ Проект создан в ' + ROOT);
